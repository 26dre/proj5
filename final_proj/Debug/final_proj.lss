
final_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ac  00800060  000012f2  00001386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  0080020c  0080020c  00001532  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb3  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afe  00000000  00000000  00003637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ebc  00000000  00000000  00004135  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000045c  00000000  00000000  00004ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f7  00000000  00000000  00005450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d44  00000000  00000000  00005b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000688b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 32       	cpi	r26, 0x29	; 41
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 01 	call	0x312	; 0x312 <main>
      8a:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
      92:	fc 01       	movw	r30, r24
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <__system_time>
      9c:	70 91 26 02 	lds	r23, 0x0226	; 0x800226 <__system_time+0x1>
      a0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <__system_time+0x2>
      a4:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <__system_time+0x3>
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	30 97       	sbiw	r30, 0x00	; 0
      ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
      ae:	60 83       	st	Z, r22
      b0:	71 83       	std	Z+1, r23	; 0x01
      b2:	82 83       	std	Z+2, r24	; 0x02
      b4:	93 83       	std	Z+3, r25	; 0x03
      b6:	08 95       	ret

000000b8 <is_pressed>:
	}

	return 0;
}

int is_pressed(int r, int c) {
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29

	DDRC = 0x00; // Set Data Direction Register A to output
      c0:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00; // Set all bits in Port A to low
      c2:	15 ba       	out	0x15, r1	; 21
	r = 3-r;
      c4:	03 e0       	ldi	r16, 0x03	; 3
      c6:	10 e0       	ldi	r17, 0x00	; 0
      c8:	e8 01       	movw	r28, r16
      ca:	c8 1b       	sub	r28, r24
      cc:	d9 0b       	sbc	r29, r25
	c = 3-c;
      ce:	06 1b       	sub	r16, r22
      d0:	17 0b       	sbc	r17, r23
	// Set the row (r) to "0"
	set_port(&DDRC, c);
      d2:	60 2f       	mov	r22, r16
      d4:	84 e3       	ldi	r24, 0x34	; 52
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <set_port>
	clear_port(&PORTC,c);
      dc:	60 2f       	mov	r22, r16
      de:	85 e3       	ldi	r24, 0x35	; 53
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	0e 94 85 05 	call	0xb0a	; 0xb0a <clear_port>
	// Set the column (c) to "high"
	clear_port(&DDRC, r+4);
      e6:	cc 5f       	subi	r28, 0xFC	; 252
      e8:	6c 2f       	mov	r22, r28
      ea:	84 e3       	ldi	r24, 0x34	; 52
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 85 05 	call	0xb0a	; 0xb0a <clear_port>
	set_port(&PORTC,r+4);
      f2:	6c 2f       	mov	r22, r28
      f4:	85 e3       	ldi	r24, 0x35	; 53
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <set_port>
	wait_avr(10);
      fc:	8a e0       	ldi	r24, 0x0A	; 10
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
	//DDRA = 0;
	if (/*GPIO @ c = 0*/  !get_pin(&PINC,r+4)) {    // Check if the corresponding pin is high
     104:	6c 2f       	mov	r22, r28
     106:	83 e3       	ldi	r24, 0x33	; 51
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 92 05 	call	0xb24	; 0xb24 <get_pin>
     10e:	81 11       	cpse	r24, r1
     110:	07 c0       	rjmp	.+14     	; 0x120 <is_pressed+0x68>
		wait_avr(10);
     112:	8a e0       	ldi	r24, 0x0A	; 10
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
		return 1;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	02 c0       	rjmp	.+4      	; 0x124 <is_pressed+0x6c>
	}

	return 0;
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	90 e0       	ldi	r25, 0x00	; 0
}
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	1f 91       	pop	r17
     12a:	0f 91       	pop	r16
     12c:	08 95       	ret

0000012e <get_key>:


const char characters[] = {'\0','1', '2', '3', 'A','4','5','6','B','7','8','9', 'C', '*', '0', '#', 'D' };


int get_key() {
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
	int i, j;

	for (i = 0; i < 4; i++) {
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	18 c0       	rjmp	.+48     	; 0x16c <get_key+0x3e>
		for (j = 0; j < 4; j++) {
			if (is_pressed(i, j)) {
     13c:	be 01       	movw	r22, r28
     13e:	c8 01       	movw	r24, r16
     140:	0e 94 5c 00 	call	0xb8	; 0xb8 <is_pressed>
     144:	89 2b       	or	r24, r25
     146:	49 f0       	breq	.+18     	; 0x15a <get_key+0x2c>
				return i * 4 + j + 1;
     148:	c8 01       	movw	r24, r16
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	88 0f       	add	r24, r24
     150:	99 1f       	adc	r25, r25
     152:	8c 0f       	add	r24, r28
     154:	9d 1f       	adc	r25, r29
     156:	01 96       	adiw	r24, 0x01	; 1
     158:	0e c0       	rjmp	.+28     	; 0x176 <get_key+0x48>

int get_key() {
	int i, j;

	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
     15a:	21 96       	adiw	r28, 0x01	; 1
     15c:	02 c0       	rjmp	.+4      	; 0x162 <get_key+0x34>
     15e:	c0 e0       	ldi	r28, 0x00	; 0
     160:	d0 e0       	ldi	r29, 0x00	; 0
     162:	c4 30       	cpi	r28, 0x04	; 4
     164:	d1 05       	cpc	r29, r1
     166:	54 f3       	brlt	.-44     	; 0x13c <get_key+0xe>


int get_key() {
	int i, j;

	for (i = 0; i < 4; i++) {
     168:	0f 5f       	subi	r16, 0xFF	; 255
     16a:	1f 4f       	sbci	r17, 0xFF	; 255
     16c:	04 30       	cpi	r16, 0x04	; 4
     16e:	11 05       	cpc	r17, r1
     170:	b4 f3       	brlt	.-20     	; 0x15e <get_key+0x30>
				return i * 4 + j + 1;
			}
		}
	}

	return 0;
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
}
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	1f 91       	pop	r17
     17c:	0f 91       	pop	r16
     17e:	08 95       	ret

00000180 <get_char_wait>:
	}

	return 0;
}

char get_char_wait(){
     180:	cf 93       	push	r28
     182:	df 93       	push	r29

	while(!get_key()){
     184:	0e 94 97 00 	call	0x12e	; 0x12e <get_key>
     188:	89 2b       	or	r24, r25
     18a:	e1 f3       	breq	.-8      	; 0x184 <get_char_wait+0x4>

	}
	int ret_key = get_key();
     18c:	0e 94 97 00 	call	0x12e	; 0x12e <get_key>
     190:	ec 01       	movw	r28, r24
	wait_avr(5);
     192:	85 e0       	ldi	r24, 0x05	; 5
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
	while(get_key() != 0){
     19a:	04 c0       	rjmp	.+8      	; 0x1a4 <get_char_wait+0x24>
		wait_avr(5);
     19c:	85 e0       	ldi	r24, 0x05	; 5
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
	while(!get_key()){

	}
	int ret_key = get_key();
	wait_avr(5);
	while(get_key() != 0){
     1a4:	0e 94 97 00 	call	0x12e	; 0x12e <get_key>
     1a8:	89 2b       	or	r24, r25
     1aa:	c1 f7       	brne	.-16     	; 0x19c <get_char_wait+0x1c>
		wait_avr(5);
	}
	return characters[ret_key];
     1ac:	c1 53       	subi	r28, 0x31	; 49
     1ae:	df 4f       	sbci	r29, 0xFF	; 255
	
}
     1b0:	88 81       	ld	r24, Y
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <get_char_no_wait>:


char get_char_no_wait(){
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
	
	int ret_key = get_key();
     1bc:	0e 94 97 00 	call	0x12e	; 0x12e <get_key>
     1c0:	ec 01       	movw	r28, r24
	wait_avr(5);
     1c2:	85 e0       	ldi	r24, 0x05	; 5
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
	return characters[ret_key];
     1ca:	c1 53       	subi	r28, 0x31	; 49
     1cc:	df 4f       	sbci	r29, 0xFF	; 255
	
}
     1ce:	88 81       	ld	r24, Y
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <input>:
}

void
lcd_put(char c)
{
  write(c, 1);
     1d6:	88 23       	and	r24, r24
     1d8:	21 f0       	breq	.+8      	; 0x1e2 <input+0xc>
     1da:	88 b3       	in	r24, 0x18	; 24
     1dc:	81 60       	ori	r24, 0x01	; 1
     1de:	88 bb       	out	0x18, r24	; 24
     1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <input+0x12>
     1e2:	88 b3       	in	r24, 0x18	; 24
     1e4:	8e 7f       	andi	r24, 0xFE	; 254
     1e6:	88 bb       	out	0x18, r24	; 24
     1e8:	88 b3       	in	r24, 0x18	; 24
     1ea:	82 60       	ori	r24, 0x02	; 2
     1ec:	88 bb       	out	0x18, r24	; 24
     1ee:	11 ba       	out	0x11, r1	; 17
     1f0:	80 b3       	in	r24, 0x10	; 16
     1f2:	88 b3       	in	r24, 0x18	; 24
     1f4:	84 60       	ori	r24, 0x04	; 4
     1f6:	88 bb       	out	0x18, r24	; 24
     1f8:	00 00       	nop
     1fa:	00 00       	nop
     1fc:	00 00       	nop
     1fe:	11 ba       	out	0x11, r1	; 17
     200:	80 b3       	in	r24, 0x10	; 16
     202:	98 b3       	in	r25, 0x18	; 24
     204:	9b 7f       	andi	r25, 0xFB	; 251
     206:	98 bb       	out	0x18, r25	; 24
     208:	08 95       	ret

0000020a <output>:
     20a:	66 23       	and	r22, r22
     20c:	21 f0       	breq	.+8      	; 0x216 <output+0xc>
     20e:	98 b3       	in	r25, 0x18	; 24
     210:	91 60       	ori	r25, 0x01	; 1
     212:	98 bb       	out	0x18, r25	; 24
     214:	03 c0       	rjmp	.+6      	; 0x21c <output+0x12>
     216:	98 b3       	in	r25, 0x18	; 24
     218:	9e 7f       	andi	r25, 0xFE	; 254
     21a:	98 bb       	out	0x18, r25	; 24
     21c:	98 b3       	in	r25, 0x18	; 24
     21e:	9d 7f       	andi	r25, 0xFD	; 253
     220:	98 bb       	out	0x18, r25	; 24
     222:	82 bb       	out	0x12, r24	; 18
     224:	8f ef       	ldi	r24, 0xFF	; 255
     226:	81 bb       	out	0x11, r24	; 17
     228:	88 b3       	in	r24, 0x18	; 24
     22a:	84 60       	ori	r24, 0x04	; 4
     22c:	88 bb       	out	0x18, r24	; 24
     22e:	00 00       	nop
     230:	00 00       	nop
     232:	00 00       	nop
     234:	88 b3       	in	r24, 0x18	; 24
     236:	8b 7f       	andi	r24, 0xFB	; 251
     238:	88 bb       	out	0x18, r24	; 24
     23a:	08 95       	ret

0000023c <write>:
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	c8 2f       	mov	r28, r24
     242:	d6 2f       	mov	r29, r22
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <input>
     24a:	88 23       	and	r24, r24
     24c:	dc f3       	brlt	.-10     	; 0x244 <write+0x8>
     24e:	6d 2f       	mov	r22, r29
     250:	8c 2f       	mov	r24, r28
     252:	0e 94 05 01 	call	0x20a	; 0x20a <output>
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <lcd_init>:
     25c:	87 b3       	in	r24, 0x17	; 23
     25e:	81 60       	ori	r24, 0x01	; 1
     260:	87 bb       	out	0x17, r24	; 23
     262:	87 b3       	in	r24, 0x17	; 23
     264:	82 60       	ori	r24, 0x02	; 2
     266:	87 bb       	out	0x17, r24	; 23
     268:	87 b3       	in	r24, 0x17	; 23
     26a:	84 60       	ori	r24, 0x04	; 4
     26c:	87 bb       	out	0x17, r24	; 23
     26e:	80 e1       	ldi	r24, 0x10	; 16
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	80 e3       	ldi	r24, 0x30	; 48
     27a:	0e 94 05 01 	call	0x20a	; 0x20a <output>
     27e:	85 e0       	ldi	r24, 0x05	; 5
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	80 e3       	ldi	r24, 0x30	; 48
     28a:	0e 94 05 01 	call	0x20a	; 0x20a <output>
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	8c e3       	ldi	r24, 0x3C	; 60
     29a:	0e 94 1e 01 	call	0x23c	; 0x23c <write>
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	8c e0       	ldi	r24, 0x0C	; 12
     2a2:	0e 94 1e 01 	call	0x23c	; 0x23c <write>
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	86 e0       	ldi	r24, 0x06	; 6
     2aa:	0e 94 1e 01 	call	0x23c	; 0x23c <write>
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0e 94 1e 01 	call	0x23c	; 0x23c <write>
     2b6:	08 95       	ret

000002b8 <lcd_clr>:
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 1e 01 	call	0x23c	; 0x23c <write>
     2c0:	08 95       	ret

000002c2 <lcd_pos>:
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	c6 2f       	mov	r28, r22
     2c8:	98 e2       	ldi	r25, 0x28	; 40
     2ca:	89 9f       	mul	r24, r25
     2cc:	c0 0d       	add	r28, r0
     2ce:	11 24       	eor	r1, r1
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	0e 94 1e 01 	call	0x23c	; 0x23c <write>
     2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <lcd_pos+0x22>
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	84 e1       	ldi	r24, 0x14	; 20
     2de:	0e 94 1e 01 	call	0x23c	; 0x23c <write>
     2e2:	cd 2f       	mov	r28, r29
     2e4:	df ef       	ldi	r29, 0xFF	; 255
     2e6:	dc 0f       	add	r29, r28
     2e8:	c1 11       	cpse	r28, r1
     2ea:	f7 cf       	rjmp	.-18     	; 0x2da <lcd_pos+0x18>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <lcd_puts2>:
//   }
// }

void
lcd_puts2(const char *s)
{
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	fc 01       	movw	r30, r24
  char c;
  while ((c = *(s++)) != 0) {
     2f8:	04 c0       	rjmp	.+8      	; 0x302 <lcd_puts2+0x10>
    write(c, 1);
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	0e 94 1e 01 	call	0x23c	; 0x23c <write>

void
lcd_puts2(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
     300:	fe 01       	movw	r30, r28
     302:	ef 01       	movw	r28, r30
     304:	21 96       	adiw	r28, 0x01	; 1
     306:	80 81       	ld	r24, Z
     308:	81 11       	cpse	r24, r1
     30a:	f7 cf       	rjmp	.-18     	; 0x2fa <lcd_puts2+0x8>
    write(c, 1);
  }
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <main>:
#include "password.h"
int main() {
    full_sm();
     312:	0e 94 62 05 	call	0xac4	; 0xac4 <full_sm>
    return 0; 
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	08 95       	ret

0000031c <toggle_log_state>:
    CURR_KEY = '\0';
    return tmp;
}

void get_state_as_char(char *buf)
{
     31c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     320:	81 11       	cpse	r24, r1
     322:	04 c0       	rjmp	.+8      	; 0x32c <toggle_log_state+0x10>
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
     32a:	08 95       	ret
     32c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
     330:	08 95       	ret

00000332 <set_curr_key>:
     332:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <CURR_KEY>
     336:	08 95       	ret

00000338 <read_curr_key>:
     338:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <CURR_KEY>
     33c:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <CURR_KEY>
     340:	08 95       	ret

00000342 <read_from_keypad_wait>:
    // return ret_str;
}

void read_from_keypad_wait()
{
    char c = get_char_wait();
     342:	0e 94 c0 00 	call	0x180	; 0x180 <get_char_wait>
    // lcd_clr();

    set_curr_key(c);
     346:	0e 94 99 01 	call	0x332	; 0x332 <set_curr_key>
     34a:	08 95       	ret

0000034c <black_out_password>:

    wait_avr(1000);
}

void black_out_password(char *password_to_blackout)
{
     34c:	ac 01       	movw	r20, r24
    for (int i = 0; password_to_blackout[i] != '\0'; i++)
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	03 c0       	rjmp	.+6      	; 0x35a <black_out_password+0xe>
    {
        password_to_blackout[i] = '\0';
     354:	10 82       	st	Z, r1
    wait_avr(1000);
}

void black_out_password(char *password_to_blackout)
{
    for (int i = 0; password_to_blackout[i] != '\0'; i++)
     356:	2f 5f       	subi	r18, 0xFF	; 255
     358:	3f 4f       	sbci	r19, 0xFF	; 255
     35a:	fa 01       	movw	r30, r20
     35c:	e2 0f       	add	r30, r18
     35e:	f3 1f       	adc	r31, r19
     360:	90 81       	ld	r25, Z
     362:	91 11       	cpse	r25, r1
     364:	f7 cf       	rjmp	.-18     	; 0x354 <black_out_password+0x8>
    {
        password_to_blackout[i] = '\0';
    }
}
     366:	08 95       	ret

00000368 <generate_one_time_password>:
        buf = "Logged Out";
    }
}

void generate_one_time_password(char length, char *pswd)
{
     368:	df 92       	push	r13
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	61 97       	sbiw	r28, 0x11	; 17
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
     386:	d8 2e       	mov	r13, r24
     388:	7b 01       	movw	r14, r22
    // char* ret_str = (char*) malloc (sizeof(char)*length);

    lcd_clr();
     38a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
    lcd_pos(0, 0);
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    lcd_puts2("One time password gen");
     396:	80 ee       	ldi	r24, 0xE0	; 224
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
    lcd_pos(1, 0);
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    wait_avr(1000);
     3a6:	88 ee       	ldi	r24, 0xE8	; 232
     3a8:	93 e0       	ldi	r25, 0x03	; 3
     3aa:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>

    black_out_password(pswd);
     3ae:	c7 01       	movw	r24, r14
     3b0:	0e 94 a6 01 	call	0x34c	; 0x34c <black_out_password>
    for (int i = 0; i < length; i++)
     3b4:	00 e0       	ldi	r16, 0x00	; 0
     3b6:	10 e0       	ldi	r17, 0x00	; 0
     3b8:	10 c0       	rjmp	.+32     	; 0x3da <generate_one_time_password+0x72>
    {
        int tmp_idx = rand() % KEYBOARD_MAX_STATES;
     3ba:	0e 94 11 06 	call	0xc22	; 0xc22 <rand>
     3be:	6f e0       	ldi	r22, 0x0F	; 15
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__divmodhi4>
        pswd[i] = local_chars[tmp_idx];
     3c6:	d7 01       	movw	r26, r14
     3c8:	a0 0f       	add	r26, r16
     3ca:	b1 1f       	adc	r27, r17
     3cc:	fc 01       	movw	r30, r24
     3ce:	e3 50       	subi	r30, 0x03	; 3
     3d0:	fe 4f       	sbci	r31, 0xFE	; 254
     3d2:	80 81       	ld	r24, Z
     3d4:	8c 93       	st	X, r24
    lcd_puts2("One time password gen");
    lcd_pos(1, 0);
    wait_avr(1000);

    black_out_password(pswd);
    for (int i = 0; i < length; i++)
     3d6:	0f 5f       	subi	r16, 0xFF	; 255
     3d8:	1f 4f       	sbci	r17, 0xFF	; 255
     3da:	8d 2d       	mov	r24, r13
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	08 17       	cp	r16, r24
     3e0:	19 07       	cpc	r17, r25
     3e2:	5c f3       	brlt	.-42     	; 0x3ba <generate_one_time_password+0x52>
        int tmp_idx = rand() % KEYBOARD_MAX_STATES;
        pswd[i] = local_chars[tmp_idx];
    }

    char buf[17];
    sprintf(buf, "New pswd: %s", pswd);
     3e4:	ff 92       	push	r15
     3e6:	ef 92       	push	r14
     3e8:	86 ef       	ldi	r24, 0xF6	; 246
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	9f 93       	push	r25
     3ee:	8f 93       	push	r24
     3f0:	8e 01       	movw	r16, r28
     3f2:	0f 5f       	subi	r16, 0xFF	; 255
     3f4:	1f 4f       	sbci	r17, 0xFF	; 255
     3f6:	1f 93       	push	r17
     3f8:	0f 93       	push	r16
     3fa:	0e 94 2a 06 	call	0xc54	; 0xc54 <sprintf>
    lcd_puts2(buf);
     3fe:	c8 01       	movw	r24, r16
     400:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
    wait_avr(2000);
     404:	80 ed       	ldi	r24, 0xD0	; 208
     406:	97 e0       	ldi	r25, 0x07	; 7
     408:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
    // return ret_str;
}
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	61 96       	adiw	r28, 0x11	; 17
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	08 95       	ret

00000434 <black_out_password_length>:
    }
}

void black_out_password_length(char *pswd_to_blackout, char length)
{
    for (int i = 0; i < length; i++)
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	06 c0       	rjmp	.+12     	; 0x446 <black_out_password_length+0x12>
    {
        pswd_to_blackout[i] = '\0';
     43a:	fc 01       	movw	r30, r24
     43c:	e2 0f       	add	r30, r18
     43e:	f3 1f       	adc	r31, r19
     440:	10 82       	st	Z, r1
    }
}

void black_out_password_length(char *pswd_to_blackout, char length)
{
    for (int i = 0; i < length; i++)
     442:	2f 5f       	subi	r18, 0xFF	; 255
     444:	3f 4f       	sbci	r19, 0xFF	; 255
     446:	46 2f       	mov	r20, r22
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	24 17       	cp	r18, r20
     44c:	35 07       	cpc	r19, r21
     44e:	ac f3       	brlt	.-22     	; 0x43a <black_out_password_length+0x6>
    {
        pswd_to_blackout[i] = '\0';
    }
}
     450:	08 95       	ret

00000452 <set_password>:
    set_curr_key(c);
}

// this function assumes that the password to set can handle the max length
void set_password(char *password_to_set)
{
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	8c 01       	movw	r16, r24
    lcd_clr();
     45c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
    lcd_pos(0, 0);
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    lcd_puts2("Set password: ");
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
    lcd_pos(1, 0);
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    wait_avr(1000);
     478:	88 ee       	ldi	r24, 0xE8	; 232
     47a:	93 e0       	ldi	r25, 0x03	; 3
     47c:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
    black_out_password_length(password_to_set, PASSWORD_MAX_LENGTH + 1);
     480:	6b e0       	ldi	r22, 0x0B	; 11
     482:	c8 01       	movw	r24, r16
     484:	0e 94 1a 02 	call	0x434	; 0x434 <black_out_password_length>
    while (strlen(password_to_set) == 0)
     488:	18 c0       	rjmp	.+48     	; 0x4ba <set_password+0x68>
    {

        for (int i = 0; i < PASSWORD_MAX_LENGTH; i++)
        {
            read_from_keypad_wait();
     48a:	0e 94 a1 01 	call	0x342	; 0x342 <read_from_keypad_wait>
            char tmp = read_curr_key();
     48e:	0e 94 9c 01 	call	0x338	; 0x338 <read_curr_key>
            if (ENTER_KEY == tmp)
     492:	83 32       	cpi	r24, 0x23	; 35
     494:	91 f0       	breq	.+36     	; 0x4ba <set_password+0x68>
            {
                break;
            }
            else
            {
                password_to_set[i] = tmp;
     496:	f8 01       	movw	r30, r16
     498:	ec 0f       	add	r30, r28
     49a:	fd 1f       	adc	r31, r29
     49c:	80 83       	st	Z, r24
                lcd_pos(1, 0);
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
                lcd_puts2(password_to_set);
     4a6:	c8 01       	movw	r24, r16
     4a8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
    wait_avr(1000);
    black_out_password_length(password_to_set, PASSWORD_MAX_LENGTH + 1);
    while (strlen(password_to_set) == 0)
    {

        for (int i = 0; i < PASSWORD_MAX_LENGTH; i++)
     4ac:	21 96       	adiw	r28, 0x01	; 1
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <set_password+0x62>
     4b0:	c0 e0       	ldi	r28, 0x00	; 0
     4b2:	d0 e0       	ldi	r29, 0x00	; 0
     4b4:	ca 30       	cpi	r28, 0x0A	; 10
     4b6:	d1 05       	cpc	r29, r1
     4b8:	44 f3       	brlt	.-48     	; 0x48a <set_password+0x38>
    lcd_pos(0, 0);
    lcd_puts2("Set password: ");
    lcd_pos(1, 0);
    wait_avr(1000);
    black_out_password_length(password_to_set, PASSWORD_MAX_LENGTH + 1);
    while (strlen(password_to_set) == 0)
     4ba:	f8 01       	movw	r30, r16
     4bc:	80 81       	ld	r24, Z
     4be:	88 23       	and	r24, r24
     4c0:	b9 f3       	breq	.-18     	; 0x4b0 <set_password+0x5e>
                lcd_puts2(password_to_set);
            }
        }
    }

    wait_avr(1000);
     4c2:	88 ee       	ldi	r24, 0xE8	; 232
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	08 95       	ret

000004d4 <inc_pswd_fail>:
    }
}

void inc_pswd_fail()
{
    TIMES_PASSWORD_FAILED++;
     4d4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <TIMES_PASSWORD_FAILED>
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <TIMES_PASSWORD_FAILED>
     4de:	08 95       	ret

000004e0 <reset_pswd_fail>:
}

void reset_pswd_fail()
{
    TIMES_PASSWORD_FAILED = 0;
     4e0:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <TIMES_PASSWORD_FAILED>
     4e4:	08 95       	ret

000004e6 <get_user_login_attempt>:
}

void get_user_login_attempt(char *buf)
{
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	8c 01       	movw	r16, r24
    lcd_clr();
     4f0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
    lcd_pos(0, 0);
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    lcd_puts2("Regular login: ");
     4fc:	82 e1       	ldi	r24, 0x12	; 18
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
    lcd_pos(1, 0);
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    wait_avr(1000);
     50c:	88 ee       	ldi	r24, 0xE8	; 232
     50e:	93 e0       	ldi	r25, 0x03	; 3
     510:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
    buf[0] = 0;
     514:	f8 01       	movw	r30, r16
     516:	10 82       	st	Z, r1
    while (strlen(buf) == 0)
     518:	18 c0       	rjmp	.+48     	; 0x54a <get_user_login_attempt+0x64>
    {

        for (int i = 0; i < PASSWORD_MAX_LENGTH; i++)
        {
            read_from_keypad_wait();
     51a:	0e 94 a1 01 	call	0x342	; 0x342 <read_from_keypad_wait>
            char tmp = read_curr_key();
     51e:	0e 94 9c 01 	call	0x338	; 0x338 <read_curr_key>
            if (ENTER_KEY == tmp)
     522:	83 32       	cpi	r24, 0x23	; 35
     524:	91 f0       	breq	.+36     	; 0x54a <get_user_login_attempt+0x64>
            {
                break;
            }
            else
            {
                buf[i] = tmp;
     526:	f8 01       	movw	r30, r16
     528:	ec 0f       	add	r30, r28
     52a:	fd 1f       	adc	r31, r29
     52c:	80 83       	st	Z, r24
                lcd_pos(1, 0);
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
                lcd_puts2(buf);
     536:	c8 01       	movw	r24, r16
     538:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
    wait_avr(1000);
    buf[0] = 0;
    while (strlen(buf) == 0)
    {

        for (int i = 0; i < PASSWORD_MAX_LENGTH; i++)
     53c:	21 96       	adiw	r28, 0x01	; 1
     53e:	02 c0       	rjmp	.+4      	; 0x544 <get_user_login_attempt+0x5e>
     540:	c0 e0       	ldi	r28, 0x00	; 0
     542:	d0 e0       	ldi	r29, 0x00	; 0
     544:	ca 30       	cpi	r28, 0x0A	; 10
     546:	d1 05       	cpc	r29, r1
     548:	44 f3       	brlt	.-48     	; 0x51a <get_user_login_attempt+0x34>
    lcd_pos(0, 0);
    lcd_puts2("Regular login: ");
    lcd_pos(1, 0);
    wait_avr(1000);
    buf[0] = 0;
    while (strlen(buf) == 0)
     54a:	f8 01       	movw	r30, r16
     54c:	80 81       	ld	r24, Z
     54e:	88 23       	and	r24, r24
     550:	b9 f3       	breq	.-18     	; 0x540 <get_user_login_attempt+0x5a>
                lcd_puts2(buf);
            }
        }
    }

    wait_avr(1000);
     552:	88 ee       	ldi	r24, 0xE8	; 232
     554:	93 e0       	ldi	r25, 0x03	; 3
     556:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	08 95       	ret

00000564 <handle_logged_in>:

void handle_logged_in()
{
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	e3 97       	sbiw	r28, 0x33	; 51
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
    // lcd_clr();
    // lcd_pos(0,0);
    // char buf[17];
    // get_state_as_char(buf);
    char buf[17];
    sprintf(buf, "%c = logout", LOG_OUT_KEY);
     580:	1f 92       	push	r1
     582:	8a e2       	ldi	r24, 0x2A	; 42
     584:	8f 93       	push	r24
     586:	82 e2       	ldi	r24, 0x22	; 34
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9f 93       	push	r25
     58c:	8f 93       	push	r24
     58e:	ce 01       	movw	r24, r28
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	0e 94 2a 06 	call	0xc54	; 0xc54 <sprintf>
    lcd_clr();
     59a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
    lcd_pos(0, 0);
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    lcd_puts2("Logged in");
     5a6:	8e e2       	ldi	r24, 0x2E	; 46
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
    wait_avr(1000);
     5ae:	88 ee       	ldi	r24, 0xE8	; 232
     5b0:	93 e0       	ldi	r25, 0x03	; 3
     5b2:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
    while (LOG_OUT_KEY != last_in)
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
    wait_avr(1000);
}

void handle_logged_in()
{
    char last_in = '\0';
     5c2:	10 e0       	ldi	r17, 0x00	; 0
    sprintf(buf, "%c = logout", LOG_OUT_KEY);
    lcd_clr();
    lcd_pos(0, 0);
    lcd_puts2("Logged in");
    wait_avr(1000);
    while (LOG_OUT_KEY != last_in)
     5c4:	45 c0       	rjmp	.+138    	; 0x650 <handle_logged_in+0xec>
    {
        lcd_clr();
     5c6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
        lcd_pos(0, 0);
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
        char buf1[17];
        char buf2[17];
        sprintf(buf1, "%c = change pwd", CHANGE_PASSWORD_KEY);
     5d2:	1f 92       	push	r1
     5d4:	84 e4       	ldi	r24, 0x44	; 68
     5d6:	8f 93       	push	r24
     5d8:	88 e3       	ldi	r24, 0x38	; 56
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	9f 93       	push	r25
     5de:	8f 93       	push	r24
     5e0:	7e 01       	movw	r14, r28
     5e2:	83 e2       	ldi	r24, 0x23	; 35
     5e4:	e8 0e       	add	r14, r24
     5e6:	f1 1c       	adc	r15, r1
     5e8:	ff 92       	push	r15
     5ea:	ef 92       	push	r14
     5ec:	0e 94 2a 06 	call	0xc54	; 0xc54 <sprintf>
        sprintf(buf2, "%c = 1 time", GENERATE_ONE_TIME);
     5f0:	1f 92       	push	r1
     5f2:	81 e3       	ldi	r24, 0x31	; 49
     5f4:	8f 93       	push	r24
     5f6:	88 e4       	ldi	r24, 0x48	; 72
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	9f 93       	push	r25
     5fc:	8f 93       	push	r24
     5fe:	8e 01       	movw	r16, r28
     600:	0e 5e       	subi	r16, 0xEE	; 238
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	1f 93       	push	r17
     606:	0f 93       	push	r16
     608:	0e 94 2a 06 	call	0xc54	; 0xc54 <sprintf>
        lcd_puts2(buf1);
     60c:	c7 01       	movw	r24, r14
     60e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
        lcd_pos(1, 0);
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
        lcd_puts2(buf2);
     61a:	c8 01       	movw	r24, r16
     61c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>

        read_from_keypad_wait();
     620:	0e 94 a1 01 	call	0x342	; 0x342 <read_from_keypad_wait>
        last_in = read_curr_key();
     624:	0e 94 9c 01 	call	0x338	; 0x338 <read_curr_key>
     628:	18 2f       	mov	r17, r24

        switch (last_in)
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	11 33       	cpi	r17, 0x31	; 49
     636:	39 f0       	breq	.+14     	; 0x646 <handle_logged_in+0xe2>
     638:	14 34       	cpi	r17, 0x44	; 68
     63a:	51 f4       	brne	.+20     	; 0x650 <handle_logged_in+0xec>
        {
        case CHANGE_PASSWORD_KEY:
            set_password(curr_password);
     63c:	88 e1       	ldi	r24, 0x18	; 24
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 29 02 	call	0x452	; 0x452 <set_password>
            break;
     644:	05 c0       	rjmp	.+10     	; 0x650 <handle_logged_in+0xec>
        case GENERATE_ONE_TIME:
            generate_one_time_password(GENERIC_ONE_TIME_LENGTH, curr_one_time);
     646:	6d e0       	ldi	r22, 0x0D	; 13
     648:	72 e0       	ldi	r23, 0x02	; 2
     64a:	84 e0       	ldi	r24, 0x04	; 4
     64c:	0e 94 b4 01 	call	0x368	; 0x368 <generate_one_time_password>
    sprintf(buf, "%c = logout", LOG_OUT_KEY);
    lcd_clr();
    lcd_pos(0, 0);
    lcd_puts2("Logged in");
    wait_avr(1000);
    while (LOG_OUT_KEY != last_in)
     650:	1a 32       	cpi	r17, 0x2A	; 42
     652:	09 f0       	breq	.+2      	; 0x656 <handle_logged_in+0xf2>
     654:	b8 cf       	rjmp	.-144    	; 0x5c6 <handle_logged_in+0x62>
        default:
            break;
        }
    }

    toggle_log_state();
     656:	0e 94 8e 01 	call	0x31c	; 0x31c <toggle_log_state>
}
     65a:	e3 96       	adiw	r28, 0x33	; 51
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	08 95       	ret

00000674 <toggle_locked_out>:

void toggle_locked_out()
{
    if (UNLOCKED == PSWD_LOCK)
     674:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PSWD_LOCK>
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	19 f4       	brne	.+6      	; 0x682 <toggle_locked_out+0xe>
    {
        PSWD_LOCK = LOCKED;
     67c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <PSWD_LOCK>
     680:	08 95       	ret
    }
    else
    {
        PSWD_LOCK = UNLOCKED;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <PSWD_LOCK>
     688:	08 95       	ret

0000068a <initial_setup>:

// }

void initial_setup()
{
    lcd_init();
     68a:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_init>
    set_password(curr_password);
     68e:	88 e1       	ldi	r24, 0x18	; 24
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	0e 94 29 02 	call	0x452	; 0x452 <set_password>
    PSWD_LOCK = UNLOCKED;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <PSWD_LOCK>

    TIMES_PASSWORD_FAILED = 0;
     69c:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <TIMES_PASSWORD_FAILED>
    LOG_STATE = LOGGED_IN;
     6a0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
    srand(time(NULL));
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 49 00 	call	0x92	; 0x92 <time>
     6ac:	0e 94 16 06 	call	0xc2c	; 0xc2c <srand>
     6b0:	08 95       	ret

000006b2 <handle_regular_login>:

    return login_succesful;
}

char handle_regular_login()
{
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	c8 57       	subi	r28, 0x78	; 120
     6c0:	d1 09       	sbc	r29, r1
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
    lcd_clr();
     6cc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
    lcd_pos(0, 0);
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    lcd_puts2("Regular Login");
     6d8:	84 e5       	ldi	r24, 0x54	; 84
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
    char login_succesful = 0;
    char login_attempt[100] = "\0";
     6e0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <FORCE_UNLOCK_PSWD+0x6>
     6e4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <FORCE_UNLOCK_PSWD+0x7>
     6e8:	9a 83       	std	Y+2, r25	; 0x02
     6ea:	89 83       	std	Y+1, r24	; 0x01
     6ec:	fe 01       	movw	r30, r28
     6ee:	33 96       	adiw	r30, 0x03	; 3
     6f0:	82 e6       	ldi	r24, 0x62	; 98
     6f2:	df 01       	movw	r26, r30
     6f4:	1d 92       	st	X+, r1
     6f6:	8a 95       	dec	r24
     6f8:	e9 f7       	brne	.-6      	; 0x6f4 <handle_regular_login+0x42>
    get_user_login_attempt(login_attempt);
     6fa:	ce 01       	movw	r24, r28
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	0e 94 73 02 	call	0x4e6	; 0x4e6 <get_user_login_attempt>
    char res_reg = strcmp(login_attempt, curr_password) == 0 ? 1 : 0;
     702:	68 e1       	ldi	r22, 0x18	; 24
     704:	72 e0       	ldi	r23, 0x02	; 2
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	0e 94 21 06 	call	0xc42	; 0xc42 <strcmp>
     70e:	8c 01       	movw	r16, r24

    char res_one_time = 0;
    // curr one time is not set
    if (curr_one_time[0] != '\0')
     710:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <curr_one_time>
     714:	88 23       	and	r24, r24
     716:	61 f0       	breq	.+24     	; 0x730 <handle_regular_login+0x7e>
    {
        res_one_time = strcmp(login_attempt, curr_one_time) == 0 ? 1 : 0;
     718:	6d e0       	ldi	r22, 0x0D	; 13
     71a:	72 e0       	ldi	r23, 0x02	; 2
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	0e 94 21 06 	call	0xc42	; 0xc42 <strcmp>
     724:	21 e0       	ldi	r18, 0x01	; 1
     726:	89 2b       	or	r24, r25
     728:	09 f0       	breq	.+2      	; 0x72c <handle_regular_login+0x7a>
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	82 2f       	mov	r24, r18
     72e:	01 c0       	rjmp	.+2      	; 0x732 <handle_regular_login+0x80>
    char login_succesful = 0;
    char login_attempt[100] = "\0";
    get_user_login_attempt(login_attempt);
    char res_reg = strcmp(login_attempt, curr_password) == 0 ? 1 : 0;

    char res_one_time = 0;
     730:	80 e0       	ldi	r24, 0x00	; 0
    if (curr_one_time[0] != '\0')
    {
        res_one_time = strcmp(login_attempt, curr_one_time) == 0 ? 1 : 0;
    }

    if (res_reg == 1)
     732:	01 2b       	or	r16, r17
     734:	71 f4       	brne	.+28     	; 0x752 <handle_regular_login+0xa0>
    {
        login_succesful = 1;
        reset_pswd_fail();
     736:	0e 94 70 02 	call	0x4e0	; 0x4e0 <reset_pswd_fail>
        lcd_clr();
     73a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
        lcd_pos(0, 0);
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
        lcd_puts2("Login Succesful");
     746:	82 e6       	ldi	r24, 0x62	; 98
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
        res_one_time = strcmp(login_attempt, curr_one_time) == 0 ? 1 : 0;
    }

    if (res_reg == 1)
    {
        login_succesful = 1;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	42 c0       	rjmp	.+132    	; 0x7d6 <handle_regular_login+0x124>
        reset_pswd_fail();
        lcd_clr();
        lcd_pos(0, 0);
        lcd_puts2("Login Succesful");
    }
    else if (res_one_time == 1)
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	99 f4       	brne	.+38     	; 0x77c <handle_regular_login+0xca>
    {
        login_succesful = 1;

        reset_pswd_fail();
     756:	0e 94 70 02 	call	0x4e0	; 0x4e0 <reset_pswd_fail>
        lcd_clr();
     75a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
        lcd_pos(0, 0);
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
        lcd_puts2("Login Succesful");
     766:	82 e6       	ldi	r24, 0x62	; 98
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
        black_out_password_length(curr_one_time, PASSWORD_MAX_LENGTH + 1);
     76e:	6b e0       	ldi	r22, 0x0B	; 11
     770:	8d e0       	ldi	r24, 0x0D	; 13
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	0e 94 1a 02 	call	0x434	; 0x434 <black_out_password_length>
        lcd_pos(0, 0);
        lcd_puts2("Login Succesful");
    }
    else if (res_one_time == 1)
    {
        login_succesful = 1;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	2d c0       	rjmp	.+90     	; 0x7d6 <handle_regular_login+0x124>
        lcd_puts2("Login Succesful");
        black_out_password_length(curr_one_time, PASSWORD_MAX_LENGTH + 1);
    }
    else
    {
        lcd_clr();
     77c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
        lcd_pos(0, 0);
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
        lcd_puts2("Login failed");
     788:	82 e7       	ldi	r24, 0x72	; 114
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
        lcd_pos(1, 0);
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
        char buf[20];
        inc_pswd_fail();
     798:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <inc_pswd_fail>
        sprintf(buf, "Failed Cnt: %d", TIMES_PASSWORD_FAILED);
     79c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <TIMES_PASSWORD_FAILED>
     7a0:	1f 92       	push	r1
     7a2:	8f 93       	push	r24
     7a4:	8f e7       	ldi	r24, 0x7F	; 127
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	9f 93       	push	r25
     7aa:	8f 93       	push	r24
     7ac:	8e 01       	movw	r16, r28
     7ae:	0b 59       	subi	r16, 0x9B	; 155
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
     7b2:	1f 93       	push	r17
     7b4:	0f 93       	push	r16
     7b6:	0e 94 2a 06 	call	0xc54	; 0xc54 <sprintf>
        lcd_puts2(buf);
     7ba:	c8 01       	movw	r24, r16
     7bc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>

        wait_avr(2000);
     7c0:	80 ed       	ldi	r24, 0xD0	; 208
     7c2:	97 e0       	ldi	r25, 0x07	; 7
     7c4:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
char handle_regular_login()
{
    lcd_clr();
    lcd_pos(0, 0);
    lcd_puts2("Regular Login");
    char login_succesful = 0;
     7d4:	80 e0       	ldi	r24, 0x00	; 0

        wait_avr(2000);
    }

    return login_succesful;
}
     7d6:	c8 58       	subi	r28, 0x88	; 136
     7d8:	df 4f       	sbci	r29, 0xFF	; 255
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <get_user_override_attempt>:
    reset_pswd_fail();
    toggle_locked_out();
    return 0;
}
void get_user_override_attempt(char *buf)
{
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	8c 01       	movw	r16, r24
    lcd_clr();
     7f8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
    lcd_pos(0, 0);
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    lcd_puts2("Manager login: ");
     804:	8e e8       	ldi	r24, 0x8E	; 142
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
    lcd_pos(1, 0);
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    wait_avr(1000);
     814:	88 ee       	ldi	r24, 0xE8	; 232
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
    buf[0] = 0;
     81c:	f8 01       	movw	r30, r16
     81e:	10 82       	st	Z, r1
    while (strlen(buf) == 0)
     820:	18 c0       	rjmp	.+48     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
    {

        for (int i = 0; i < PASSWORD_MAX_LENGTH; i++)
        {
            read_from_keypad_wait();
     822:	0e 94 a1 01 	call	0x342	; 0x342 <read_from_keypad_wait>
            char tmp = read_curr_key();
     826:	0e 94 9c 01 	call	0x338	; 0x338 <read_curr_key>
            if (ENTER_KEY == tmp)
     82a:	83 32       	cpi	r24, 0x23	; 35
     82c:	91 f0       	breq	.+36     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
            {
                break;
            }
            else
            {
                buf[i] = tmp;
     82e:	f8 01       	movw	r30, r16
     830:	ec 0f       	add	r30, r28
     832:	fd 1f       	adc	r31, r29
     834:	80 83       	st	Z, r24
                lcd_pos(1, 0);
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
                lcd_puts2(buf);
     83e:	c8 01       	movw	r24, r16
     840:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
    wait_avr(1000);
    buf[0] = 0;
    while (strlen(buf) == 0)
    {

        for (int i = 0; i < PASSWORD_MAX_LENGTH; i++)
     844:	21 96       	adiw	r28, 0x01	; 1
     846:	02 c0       	rjmp	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     848:	c0 e0       	ldi	r28, 0x00	; 0
     84a:	d0 e0       	ldi	r29, 0x00	; 0
     84c:	ca 30       	cpi	r28, 0x0A	; 10
     84e:	d1 05       	cpc	r29, r1
     850:	44 f3       	brlt	.-48     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
    lcd_pos(0, 0);
    lcd_puts2("Manager login: ");
    lcd_pos(1, 0);
    wait_avr(1000);
    buf[0] = 0;
    while (strlen(buf) == 0)
     852:	f8 01       	movw	r30, r16
     854:	80 81       	ld	r24, Z
     856:	88 23       	and	r24, r24
     858:	b9 f3       	breq	.-18     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
                lcd_puts2(buf);
            }
        }
    }

    wait_avr(1000);
     85a:	88 ee       	ldi	r24, 0xE8	; 232
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	08 95       	ret

0000086c <handle_override_login>:
    LOG_STATE = LOGGED_IN;
    srand(time(NULL));
}

char handle_override_login()
{
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	c4 56       	subi	r28, 0x64	; 100
     87a:	d1 09       	sbc	r29, r1
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
    lcd_clr();
     886:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
    lcd_pos(0, 0);
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    lcd_puts2("Manager Login");
     892:	8e e9       	ldi	r24, 0x9E	; 158
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>

    char login_succesful = 0;
    char override_attempt[100] = "\0";
     89a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <FORCE_UNLOCK_PSWD+0x6>
     89e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <FORCE_UNLOCK_PSWD+0x7>
     8a2:	9a 83       	std	Y+2, r25	; 0x02
     8a4:	89 83       	std	Y+1, r24	; 0x01
     8a6:	fe 01       	movw	r30, r28
     8a8:	33 96       	adiw	r30, 0x03	; 3
     8aa:	82 e6       	ldi	r24, 0x62	; 98
     8ac:	df 01       	movw	r26, r30
     8ae:	1d 92       	st	X+, r1
     8b0:	8a 95       	dec	r24
     8b2:	e9 f7       	brne	.-6      	; 0x8ae <handle_override_login+0x42>
    get_user_override_attempt(override_attempt);
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <get_user_override_attempt>

    char override_res = strcmp(override_attempt, FORCE_UNLOCK_PSWD) == 0 ? 1 : 0;
     8bc:	65 e6       	ldi	r22, 0x65	; 101
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	0e 94 21 06 	call	0xc42	; 0xc42 <strcmp>
     8c8:	8c 01       	movw	r16, r24
    lcd_pos(1, 0);
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    if (override_res)
     8d2:	01 2b       	or	r16, r17
     8d4:	51 f4       	brne	.+20     	; 0x8ea <handle_override_login+0x7e>
    {
        login_succesful = 1;
        reset_pswd_fail();
     8d6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <reset_pswd_fail>
        toggle_locked_out();
     8da:	0e 94 3a 03 	call	0x674	; 0x674 <toggle_locked_out>
        lcd_puts2("Login succesful");
     8de:	8c ea       	ldi	r24, 0xAC	; 172
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>

    char override_res = strcmp(override_attempt, FORCE_UNLOCK_PSWD) == 0 ? 1 : 0;
    lcd_pos(1, 0);
    if (override_res)
    {
        login_succesful = 1;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <handle_override_login+0x88>
        toggle_locked_out();
        lcd_puts2("Login succesful");
    }
    else
    {
        lcd_puts2("Login unsuccesful");
     8ea:	8c eb       	ldi	r24, 0xBC	; 188
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
{
    lcd_clr();
    lcd_pos(0, 0);
    lcd_puts2("Manager Login");

    char login_succesful = 0;
     8f2:	80 e0       	ldi	r24, 0x00	; 0
    {
        lcd_puts2("Login unsuccesful");
    }

    return login_succesful;
}
     8f4:	cc 59       	subi	r28, 0x9C	; 156
     8f6:	df 4f       	sbci	r29, 0xFF	; 255
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	08 95       	ret

0000090c <handle_locked_out>:

    return login_succesful;
}

char handle_locked_out()
{
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	2a 97       	sbiw	r28, 0x0a	; 10
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
    lcd_clr();
     928:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
    lcd_pos(0, 0);
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    lcd_puts2("Locked out");
     934:	8e ec       	ldi	r24, 0xCE	; 206
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
    lcd_pos(1, 0);
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
    for (int i = 60; i > 0; i--)
     944:	0c e3       	ldi	r16, 0x3C	; 60
     946:	10 e0       	ldi	r17, 0x00	; 0
     948:	2a c0       	rjmp	.+84     	; 0x99e <handle_locked_out+0x92>
    {

        char c = get_char_no_wait();
     94a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_char_no_wait>

        if (c == FORCE_UNLOCK_START && handle_override_login())
     94e:	83 32       	cpi	r24, 0x23	; 35
     950:	31 f4       	brne	.+12     	; 0x95e <handle_locked_out+0x52>
     952:	0e 94 36 04 	call	0x86c	; 0x86c <handle_override_login>
     956:	88 23       	and	r24, r24
     958:	11 f0       	breq	.+4      	; 0x95e <handle_locked_out+0x52>
        {
            return 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	28 c0       	rjmp	.+80     	; 0x9ae <handle_locked_out+0xa2>
        }
        // note this will keep the timer going even after an attempt for a manager log in
        // that is a user will still be locked out for the full time regardless

        lcd_pos(1, 0);
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>

        char time_left[10];
        sprintf(time_left, "Left: %02d", i);
     966:	1f 93       	push	r17
     968:	0f 93       	push	r16
     96a:	89 ed       	ldi	r24, 0xD9	; 217
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	ce 01       	movw	r24, r28
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	7c 01       	movw	r14, r24
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	0e 94 2a 06 	call	0xc54	; 0xc54 <sprintf>
        lcd_puts2(time_left);
     980:	c7 01       	movw	r24, r14
     982:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
        wait_avr(995);
     986:	83 ee       	ldi	r24, 0xE3	; 227
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	0e 94 66 05 	call	0xacc	; 0xacc <wait_avr>
{
    lcd_clr();
    lcd_pos(0, 0);
    lcd_puts2("Locked out");
    lcd_pos(1, 0);
    for (int i = 60; i > 0; i--)
     98e:	01 50       	subi	r16, 0x01	; 1
     990:	11 09       	sbc	r17, r1
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	10 16       	cp	r1, r16
     9a0:	11 06       	cpc	r1, r17
     9a2:	9c f2       	brlt	.-90     	; 0x94a <handle_locked_out+0x3e>
        sprintf(time_left, "Left: %02d", i);
        lcd_puts2(time_left);
        wait_avr(995);
    }

    reset_pswd_fail();
     9a4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <reset_pswd_fail>
    toggle_locked_out();
     9a8:	0e 94 3a 03 	call	0x674	; 0x674 <toggle_locked_out>
    return 0;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
}
     9ae:	2a 96       	adiw	r28, 0x0a	; 10
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	08 95       	ret

000009c8 <handle_logged_out>:
        PSWD_LOCK = UNLOCKED;
    }
}

void handle_logged_out()
{
     9c8:	df 92       	push	r13
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	6e 97       	sbiw	r28, 0x1e	; 30
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	cd bf       	out	0x3d, r28	; 61

    char login_succesful = 0;
     9e6:	d1 2c       	mov	r13, r1

    while (!login_succesful)
     9e8:	4e c0       	rjmp	.+156    	; 0xa86 <handle_logged_out+0xbe>
    {
        // lcd_puts2("Press ")
        lcd_clr();
     9ea:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clr>
        char buf1[15];
        sprintf(buf1, "%c = log in", LOG_IN_KEY);
     9ee:	1f 92       	push	r1
     9f0:	8a e2       	ldi	r24, 0x2A	; 42
     9f2:	8f 93       	push	r24
     9f4:	84 ee       	ldi	r24, 0xE4	; 228
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	9f 93       	push	r25
     9fa:	8f 93       	push	r24
     9fc:	8e 01       	movw	r16, r28
     9fe:	00 5f       	subi	r16, 0xF0	; 240
     a00:	1f 4f       	sbci	r17, 0xFF	; 255
     a02:	1f 93       	push	r17
     a04:	0f 93       	push	r16
     a06:	0e 94 2a 06 	call	0xc54	; 0xc54 <sprintf>
        char buf2[15];
        sprintf(buf2, "%c = manager", FORCE_UNLOCK_START);
     a0a:	1f 92       	push	r1
     a0c:	83 e2       	ldi	r24, 0x23	; 35
     a0e:	8f 93       	push	r24
     a10:	80 ef       	ldi	r24, 0xF0	; 240
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	9f 93       	push	r25
     a16:	8f 93       	push	r24
     a18:	9e 01       	movw	r18, r28
     a1a:	2f 5f       	subi	r18, 0xFF	; 255
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	79 01       	movw	r14, r18
     a20:	3f 93       	push	r19
     a22:	2f 93       	push	r18
     a24:	0e 94 2a 06 	call	0xc54	; 0xc54 <sprintf>
        lcd_pos(0, 0);
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
        lcd_puts2(buf1);
     a30:	c8 01       	movw	r24, r16
     a32:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>
        lcd_pos(1, 0);
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_pos>
        lcd_puts2(buf2);
     a3e:	c7 01       	movw	r24, r14
     a40:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_puts2>

        char last_in = '\0';
        read_from_keypad_wait();
     a44:	0e 94 a1 01 	call	0x342	; 0x342 <read_from_keypad_wait>
        last_in = read_curr_key();
     a48:	0e 94 9c 01 	call	0x338	; 0x338 <read_curr_key>
        switch (last_in)
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	83 32       	cpi	r24, 0x23	; 35
     a58:	61 f0       	breq	.+24     	; 0xa72 <handle_logged_out+0xaa>
     a5a:	8a 32       	cpi	r24, 0x2A	; 42
     a5c:	69 f4       	brne	.+26     	; 0xa78 <handle_logged_out+0xb0>
        {
        case LOG_IN_KEY:
        {

            login_succesful = handle_regular_login();
     a5e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <handle_regular_login>
     a62:	d8 2e       	mov	r13, r24

            if (MAX_CONSECUTIVE_FAILED == TIMES_PASSWORD_FAILED)
     a64:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <TIMES_PASSWORD_FAILED>
     a68:	83 30       	cpi	r24, 0x03	; 3
     a6a:	31 f4       	brne	.+12     	; 0xa78 <handle_logged_out+0xb0>
            {
                toggle_locked_out();
     a6c:	0e 94 3a 03 	call	0x674	; 0x674 <toggle_locked_out>
     a70:	03 c0       	rjmp	.+6      	; 0xa78 <handle_logged_out+0xb0>

            break;
        }
        case FORCE_UNLOCK_START:
        {
            login_succesful = handle_override_login();
     a72:	0e 94 36 04 	call	0x86c	; 0x86c <handle_override_login>
     a76:	d8 2e       	mov	r13, r24
        }
        default:
            break;
        }

        if (MAX_CONSECUTIVE_FAILED == TIMES_PASSWORD_FAILED)
     a78:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <TIMES_PASSWORD_FAILED>
     a7c:	83 30       	cpi	r24, 0x03	; 3
     a7e:	19 f4       	brne	.+6      	; 0xa86 <handle_logged_out+0xbe>
        {
            login_succesful = handle_locked_out();
     a80:	0e 94 86 04 	call	0x90c	; 0x90c <handle_locked_out>
     a84:	d8 2e       	mov	r13, r24
void handle_logged_out()
{

    char login_succesful = 0;

    while (!login_succesful)
     a86:	dd 20       	and	r13, r13
     a88:	09 f4       	brne	.+2      	; 0xa8c <handle_logged_out+0xc4>
     a8a:	af cf       	rjmp	.-162    	; 0x9ea <handle_logged_out+0x22>
        {
            login_succesful = handle_locked_out();
        }
    }

    toggle_log_state();
     a8c:	0e 94 8e 01 	call	0x31c	; 0x31c <toggle_log_state>
}
     a90:	6e 96       	adiw	r28, 0x1e	; 30
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	df 90       	pop	r13
     aaa:	08 95       	ret

00000aac <main_sm>:
void main_sm()
{

    while (1)
    {
        if (LOGGED_IN == LOG_STATE)
     aac:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	19 f4       	brne	.+6      	; 0xaba <main_sm+0xe>
        {
            handle_logged_in();
     ab4:	0e 94 b2 02 	call	0x564	; 0x564 <handle_logged_in>
     ab8:	f9 cf       	rjmp	.-14     	; 0xaac <main_sm>
        }
        else if (LOGGED_OUT == LOG_STATE)
     aba:	81 11       	cpse	r24, r1
     abc:	f7 cf       	rjmp	.-18     	; 0xaac <main_sm>
        {
            handle_logged_out();
     abe:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <handle_logged_out>
     ac2:	f4 cf       	rjmp	.-24     	; 0xaac <main_sm>

00000ac4 <full_sm>:
    }
}

void full_sm()
{
    initial_setup();
     ac4:	0e 94 45 03 	call	0x68a	; 0x68a <initial_setup>
    main_sm();
     ac8:	0e 94 56 05 	call	0xaac	; 0xaac <main_sm>

00000acc <wait_avr>:
	while(microsec --){
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ/8)*0.00001);
		SET_BIT(TIFR, TOV0);
		while(!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
     acc:	23 e0       	ldi	r18, 0x03	; 3
     ace:	23 bf       	out	0x33, r18	; 51
     ad0:	09 c0       	rjmp	.+18     	; 0xae4 <wait_avr+0x18>
     ad2:	83 e8       	ldi	r24, 0x83	; 131
     ad4:	82 bf       	out	0x32, r24	; 50
     ad6:	88 b7       	in	r24, 0x38	; 56
     ad8:	81 60       	ori	r24, 0x01	; 1
     ada:	88 bf       	out	0x38, r24	; 56
     adc:	08 b6       	in	r0, 0x38	; 56
     ade:	00 fe       	sbrs	r0, 0
     ae0:	fd cf       	rjmp	.-6      	; 0xadc <wait_avr+0x10>
     ae2:	c9 01       	movw	r24, r18
     ae4:	9c 01       	movw	r18, r24
     ae6:	21 50       	subi	r18, 0x01	; 1
     ae8:	31 09       	sbc	r19, r1
     aea:	89 2b       	or	r24, r25
     aec:	91 f7       	brne	.-28     	; 0xad2 <wait_avr+0x6>
     aee:	13 be       	out	0x33, r1	; 51
     af0:	08 95       	ret

00000af2 <set_port>:
}



void set_port(char* portname, char portnum){
	*portname = *portname | 0x01 << portnum;
     af2:	fc 01       	movw	r30, r24
     af4:	40 81       	ld	r20, Z
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <set_port+0xe>
     afc:	22 0f       	add	r18, r18
     afe:	33 1f       	adc	r19, r19
     b00:	6a 95       	dec	r22
     b02:	e2 f7       	brpl	.-8      	; 0xafc <set_port+0xa>
     b04:	24 2b       	or	r18, r20
     b06:	20 83       	st	Z, r18
     b08:	08 95       	ret

00000b0a <clear_port>:
	
}

void clear_port(char* portname, char portnum){
     b0a:	fc 01       	movw	r30, r24
	*portname = *portname & (~(0x01 << portnum));
     b0c:	90 81       	ld	r25, Z
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <clear_port+0xe>
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	6a 95       	dec	r22
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <clear_port+0xa>
     b1c:	20 95       	com	r18
     b1e:	29 23       	and	r18, r25
     b20:	20 83       	st	Z, r18
     b22:	08 95       	ret

00000b24 <get_pin>:
	
}

char get_pin(char* portname, char portnum){
	
	return *portname & 0x01 << portnum;
     b24:	21 e0       	ldi	r18, 0x01	; 1
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <get_pin+0xa>
     b2a:	22 0f       	add	r18, r18
     b2c:	33 1f       	adc	r19, r19
     b2e:	6a 95       	dec	r22
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <get_pin+0x6>
     b32:	fc 01       	movw	r30, r24
     b34:	80 81       	ld	r24, Z
}
     b36:	82 23       	and	r24, r18
     b38:	08 95       	ret

00000b3a <__divmodhi4>:
     b3a:	97 fb       	bst	r25, 7
     b3c:	07 2e       	mov	r0, r23
     b3e:	16 f4       	brtc	.+4      	; 0xb44 <__divmodhi4+0xa>
     b40:	00 94       	com	r0
     b42:	07 d0       	rcall	.+14     	; 0xb52 <__divmodhi4_neg1>
     b44:	77 fd       	sbrc	r23, 7
     b46:	09 d0       	rcall	.+18     	; 0xb5a <__divmodhi4_neg2>
     b48:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodhi4>
     b4c:	07 fc       	sbrc	r0, 7
     b4e:	05 d0       	rcall	.+10     	; 0xb5a <__divmodhi4_neg2>
     b50:	3e f4       	brtc	.+14     	; 0xb60 <__divmodhi4_exit>

00000b52 <__divmodhi4_neg1>:
     b52:	90 95       	com	r25
     b54:	81 95       	neg	r24
     b56:	9f 4f       	sbci	r25, 0xFF	; 255
     b58:	08 95       	ret

00000b5a <__divmodhi4_neg2>:
     b5a:	70 95       	com	r23
     b5c:	61 95       	neg	r22
     b5e:	7f 4f       	sbci	r23, 0xFF	; 255

00000b60 <__divmodhi4_exit>:
     b60:	08 95       	ret

00000b62 <__udivmodhi4>:
     b62:	aa 1b       	sub	r26, r26
     b64:	bb 1b       	sub	r27, r27
     b66:	51 e1       	ldi	r21, 0x11	; 17
     b68:	07 c0       	rjmp	.+14     	; 0xb78 <__udivmodhi4_ep>

00000b6a <__udivmodhi4_loop>:
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	a6 17       	cp	r26, r22
     b70:	b7 07       	cpc	r27, r23
     b72:	10 f0       	brcs	.+4      	; 0xb78 <__udivmodhi4_ep>
     b74:	a6 1b       	sub	r26, r22
     b76:	b7 0b       	sbc	r27, r23

00000b78 <__udivmodhi4_ep>:
     b78:	88 1f       	adc	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	5a 95       	dec	r21
     b7e:	a9 f7       	brne	.-22     	; 0xb6a <__udivmodhi4_loop>
     b80:	80 95       	com	r24
     b82:	90 95       	com	r25
     b84:	bc 01       	movw	r22, r24
     b86:	cd 01       	movw	r24, r26
     b88:	08 95       	ret

00000b8a <do_rand>:
     b8a:	8f 92       	push	r8
     b8c:	9f 92       	push	r9
     b8e:	af 92       	push	r10
     b90:	bf 92       	push	r11
     b92:	cf 92       	push	r12
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ec 01       	movw	r28, r24
     ba0:	68 81       	ld	r22, Y
     ba2:	79 81       	ldd	r23, Y+1	; 0x01
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	9b 81       	ldd	r25, Y+3	; 0x03
     ba8:	61 15       	cp	r22, r1
     baa:	71 05       	cpc	r23, r1
     bac:	81 05       	cpc	r24, r1
     bae:	91 05       	cpc	r25, r1
     bb0:	21 f4       	brne	.+8      	; 0xbba <do_rand+0x30>
     bb2:	64 e2       	ldi	r22, 0x24	; 36
     bb4:	79 ed       	ldi	r23, 0xD9	; 217
     bb6:	8b e5       	ldi	r24, 0x5B	; 91
     bb8:	97 e0       	ldi	r25, 0x07	; 7
     bba:	2d e1       	ldi	r18, 0x1D	; 29
     bbc:	33 ef       	ldi	r19, 0xF3	; 243
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__divmodsi4>
     bc6:	49 01       	movw	r8, r18
     bc8:	5a 01       	movw	r10, r20
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	a7 ea       	ldi	r26, 0xA7	; 167
     bd0:	b1 e4       	ldi	r27, 0x41	; 65
     bd2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__muluhisi3>
     bd6:	6b 01       	movw	r12, r22
     bd8:	7c 01       	movw	r14, r24
     bda:	ac ee       	ldi	r26, 0xEC	; 236
     bdc:	b4 ef       	ldi	r27, 0xF4	; 244
     bde:	a5 01       	movw	r20, r10
     be0:	94 01       	movw	r18, r8
     be2:	0e 94 0a 09 	call	0x1214	; 0x1214 <__mulohisi3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	8c 0d       	add	r24, r12
     bec:	9d 1d       	adc	r25, r13
     bee:	ae 1d       	adc	r26, r14
     bf0:	bf 1d       	adc	r27, r15
     bf2:	b7 ff       	sbrs	r27, 7
     bf4:	03 c0       	rjmp	.+6      	; 0xbfc <do_rand+0x72>
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	a1 09       	sbc	r26, r1
     bfa:	b0 48       	sbci	r27, 0x80	; 128
     bfc:	88 83       	st	Y, r24
     bfe:	99 83       	std	Y+1, r25	; 0x01
     c00:	aa 83       	std	Y+2, r26	; 0x02
     c02:	bb 83       	std	Y+3, r27	; 0x03
     c04:	9f 77       	andi	r25, 0x7F	; 127
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	df 90       	pop	r13
     c10:	cf 90       	pop	r12
     c12:	bf 90       	pop	r11
     c14:	af 90       	pop	r10
     c16:	9f 90       	pop	r9
     c18:	8f 90       	pop	r8
     c1a:	08 95       	ret

00000c1c <rand_r>:
     c1c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <do_rand>
     c20:	08 95       	ret

00000c22 <rand>:
     c22:	80 e6       	ldi	r24, 0x60	; 96
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 c5 05 	call	0xb8a	; 0xb8a <do_rand>
     c2a:	08 95       	ret

00000c2c <srand>:
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     c34:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c38:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     c3c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     c40:	08 95       	ret

00000c42 <strcmp>:
     c42:	fb 01       	movw	r30, r22
     c44:	dc 01       	movw	r26, r24
     c46:	8d 91       	ld	r24, X+
     c48:	01 90       	ld	r0, Z+
     c4a:	80 19       	sub	r24, r0
     c4c:	01 10       	cpse	r0, r1
     c4e:	d9 f3       	breq	.-10     	; 0xc46 <strcmp+0x4>
     c50:	99 0b       	sbc	r25, r25
     c52:	08 95       	ret

00000c54 <sprintf>:
     c54:	ae e0       	ldi	r26, 0x0E	; 14
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e0 e3       	ldi	r30, 0x30	; 48
     c5a:	f6 e0       	ldi	r31, 0x06	; 6
     c5c:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__prologue_saves__+0x1c>
     c60:	0d 89       	ldd	r16, Y+21	; 0x15
     c62:	1e 89       	ldd	r17, Y+22	; 0x16
     c64:	86 e0       	ldi	r24, 0x06	; 6
     c66:	8c 83       	std	Y+4, r24	; 0x04
     c68:	1a 83       	std	Y+2, r17	; 0x02
     c6a:	09 83       	std	Y+1, r16	; 0x01
     c6c:	8f ef       	ldi	r24, 0xFF	; 255
     c6e:	9f e7       	ldi	r25, 0x7F	; 127
     c70:	9e 83       	std	Y+6, r25	; 0x06
     c72:	8d 83       	std	Y+5, r24	; 0x05
     c74:	ae 01       	movw	r20, r28
     c76:	47 5e       	subi	r20, 0xE7	; 231
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	6f 89       	ldd	r22, Y+23	; 0x17
     c7c:	78 8d       	ldd	r23, Y+24	; 0x18
     c7e:	ce 01       	movw	r24, r28
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	0e 94 4c 06 	call	0xc98	; 0xc98 <vfprintf>
     c86:	ef 81       	ldd	r30, Y+7	; 0x07
     c88:	f8 85       	ldd	r31, Y+8	; 0x08
     c8a:	e0 0f       	add	r30, r16
     c8c:	f1 1f       	adc	r31, r17
     c8e:	10 82       	st	Z, r1
     c90:	2e 96       	adiw	r28, 0x0e	; 14
     c92:	e4 e0       	ldi	r30, 0x04	; 4
     c94:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__epilogue_restores__+0x1c>

00000c98 <vfprintf>:
     c98:	ab e0       	ldi	r26, 0x0B	; 11
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e2 e5       	ldi	r30, 0x52	; 82
     c9e:	f6 e0       	ldi	r31, 0x06	; 6
     ca0:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__prologue_saves__>
     ca4:	6c 01       	movw	r12, r24
     ca6:	7b 01       	movw	r14, r22
     ca8:	8a 01       	movw	r16, r20
     caa:	fc 01       	movw	r30, r24
     cac:	17 82       	std	Z+7, r1	; 0x07
     cae:	16 82       	std	Z+6, r1	; 0x06
     cb0:	83 81       	ldd	r24, Z+3	; 0x03
     cb2:	81 ff       	sbrs	r24, 1
     cb4:	cc c1       	rjmp	.+920    	; 0x104e <vfprintf+0x3b6>
     cb6:	ce 01       	movw	r24, r28
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	3c 01       	movw	r6, r24
     cbc:	f6 01       	movw	r30, r12
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	f7 01       	movw	r30, r14
     cc2:	93 fd       	sbrc	r25, 3
     cc4:	85 91       	lpm	r24, Z+
     cc6:	93 ff       	sbrs	r25, 3
     cc8:	81 91       	ld	r24, Z+
     cca:	7f 01       	movw	r14, r30
     ccc:	88 23       	and	r24, r24
     cce:	09 f4       	brne	.+2      	; 0xcd2 <vfprintf+0x3a>
     cd0:	ba c1       	rjmp	.+884    	; 0x1046 <vfprintf+0x3ae>
     cd2:	85 32       	cpi	r24, 0x25	; 37
     cd4:	39 f4       	brne	.+14     	; 0xce4 <vfprintf+0x4c>
     cd6:	93 fd       	sbrc	r25, 3
     cd8:	85 91       	lpm	r24, Z+
     cda:	93 ff       	sbrs	r25, 3
     cdc:	81 91       	ld	r24, Z+
     cde:	7f 01       	movw	r14, r30
     ce0:	85 32       	cpi	r24, 0x25	; 37
     ce2:	29 f4       	brne	.+10     	; 0xcee <vfprintf+0x56>
     ce4:	b6 01       	movw	r22, r12
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     cec:	e7 cf       	rjmp	.-50     	; 0xcbc <vfprintf+0x24>
     cee:	91 2c       	mov	r9, r1
     cf0:	21 2c       	mov	r2, r1
     cf2:	31 2c       	mov	r3, r1
     cf4:	ff e1       	ldi	r31, 0x1F	; 31
     cf6:	f3 15       	cp	r31, r3
     cf8:	d8 f0       	brcs	.+54     	; 0xd30 <vfprintf+0x98>
     cfa:	8b 32       	cpi	r24, 0x2B	; 43
     cfc:	79 f0       	breq	.+30     	; 0xd1c <vfprintf+0x84>
     cfe:	38 f4       	brcc	.+14     	; 0xd0e <vfprintf+0x76>
     d00:	80 32       	cpi	r24, 0x20	; 32
     d02:	79 f0       	breq	.+30     	; 0xd22 <vfprintf+0x8a>
     d04:	83 32       	cpi	r24, 0x23	; 35
     d06:	a1 f4       	brne	.+40     	; 0xd30 <vfprintf+0x98>
     d08:	23 2d       	mov	r18, r3
     d0a:	20 61       	ori	r18, 0x10	; 16
     d0c:	1d c0       	rjmp	.+58     	; 0xd48 <vfprintf+0xb0>
     d0e:	8d 32       	cpi	r24, 0x2D	; 45
     d10:	61 f0       	breq	.+24     	; 0xd2a <vfprintf+0x92>
     d12:	80 33       	cpi	r24, 0x30	; 48
     d14:	69 f4       	brne	.+26     	; 0xd30 <vfprintf+0x98>
     d16:	23 2d       	mov	r18, r3
     d18:	21 60       	ori	r18, 0x01	; 1
     d1a:	16 c0       	rjmp	.+44     	; 0xd48 <vfprintf+0xb0>
     d1c:	83 2d       	mov	r24, r3
     d1e:	82 60       	ori	r24, 0x02	; 2
     d20:	38 2e       	mov	r3, r24
     d22:	e3 2d       	mov	r30, r3
     d24:	e4 60       	ori	r30, 0x04	; 4
     d26:	3e 2e       	mov	r3, r30
     d28:	2a c0       	rjmp	.+84     	; 0xd7e <vfprintf+0xe6>
     d2a:	f3 2d       	mov	r31, r3
     d2c:	f8 60       	ori	r31, 0x08	; 8
     d2e:	1d c0       	rjmp	.+58     	; 0xd6a <vfprintf+0xd2>
     d30:	37 fc       	sbrc	r3, 7
     d32:	2d c0       	rjmp	.+90     	; 0xd8e <vfprintf+0xf6>
     d34:	20 ed       	ldi	r18, 0xD0	; 208
     d36:	28 0f       	add	r18, r24
     d38:	2a 30       	cpi	r18, 0x0A	; 10
     d3a:	40 f0       	brcs	.+16     	; 0xd4c <vfprintf+0xb4>
     d3c:	8e 32       	cpi	r24, 0x2E	; 46
     d3e:	b9 f4       	brne	.+46     	; 0xd6e <vfprintf+0xd6>
     d40:	36 fc       	sbrc	r3, 6
     d42:	81 c1       	rjmp	.+770    	; 0x1046 <vfprintf+0x3ae>
     d44:	23 2d       	mov	r18, r3
     d46:	20 64       	ori	r18, 0x40	; 64
     d48:	32 2e       	mov	r3, r18
     d4a:	19 c0       	rjmp	.+50     	; 0xd7e <vfprintf+0xe6>
     d4c:	36 fe       	sbrs	r3, 6
     d4e:	06 c0       	rjmp	.+12     	; 0xd5c <vfprintf+0xc4>
     d50:	8a e0       	ldi	r24, 0x0A	; 10
     d52:	98 9e       	mul	r9, r24
     d54:	20 0d       	add	r18, r0
     d56:	11 24       	eor	r1, r1
     d58:	92 2e       	mov	r9, r18
     d5a:	11 c0       	rjmp	.+34     	; 0xd7e <vfprintf+0xe6>
     d5c:	ea e0       	ldi	r30, 0x0A	; 10
     d5e:	2e 9e       	mul	r2, r30
     d60:	20 0d       	add	r18, r0
     d62:	11 24       	eor	r1, r1
     d64:	22 2e       	mov	r2, r18
     d66:	f3 2d       	mov	r31, r3
     d68:	f0 62       	ori	r31, 0x20	; 32
     d6a:	3f 2e       	mov	r3, r31
     d6c:	08 c0       	rjmp	.+16     	; 0xd7e <vfprintf+0xe6>
     d6e:	8c 36       	cpi	r24, 0x6C	; 108
     d70:	21 f4       	brne	.+8      	; 0xd7a <vfprintf+0xe2>
     d72:	83 2d       	mov	r24, r3
     d74:	80 68       	ori	r24, 0x80	; 128
     d76:	38 2e       	mov	r3, r24
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <vfprintf+0xe6>
     d7a:	88 36       	cpi	r24, 0x68	; 104
     d7c:	41 f4       	brne	.+16     	; 0xd8e <vfprintf+0xf6>
     d7e:	f7 01       	movw	r30, r14
     d80:	93 fd       	sbrc	r25, 3
     d82:	85 91       	lpm	r24, Z+
     d84:	93 ff       	sbrs	r25, 3
     d86:	81 91       	ld	r24, Z+
     d88:	7f 01       	movw	r14, r30
     d8a:	81 11       	cpse	r24, r1
     d8c:	b3 cf       	rjmp	.-154    	; 0xcf4 <vfprintf+0x5c>
     d8e:	98 2f       	mov	r25, r24
     d90:	9f 7d       	andi	r25, 0xDF	; 223
     d92:	95 54       	subi	r25, 0x45	; 69
     d94:	93 30       	cpi	r25, 0x03	; 3
     d96:	28 f4       	brcc	.+10     	; 0xda2 <vfprintf+0x10a>
     d98:	0c 5f       	subi	r16, 0xFC	; 252
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	9f e3       	ldi	r25, 0x3F	; 63
     d9e:	99 83       	std	Y+1, r25	; 0x01
     da0:	0d c0       	rjmp	.+26     	; 0xdbc <vfprintf+0x124>
     da2:	83 36       	cpi	r24, 0x63	; 99
     da4:	31 f0       	breq	.+12     	; 0xdb2 <vfprintf+0x11a>
     da6:	83 37       	cpi	r24, 0x73	; 115
     da8:	71 f0       	breq	.+28     	; 0xdc6 <vfprintf+0x12e>
     daa:	83 35       	cpi	r24, 0x53	; 83
     dac:	09 f0       	breq	.+2      	; 0xdb0 <vfprintf+0x118>
     dae:	59 c0       	rjmp	.+178    	; 0xe62 <vfprintf+0x1ca>
     db0:	21 c0       	rjmp	.+66     	; 0xdf4 <vfprintf+0x15c>
     db2:	f8 01       	movw	r30, r16
     db4:	80 81       	ld	r24, Z
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	0e 5f       	subi	r16, 0xFE	; 254
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	88 24       	eor	r8, r8
     dbe:	83 94       	inc	r8
     dc0:	91 2c       	mov	r9, r1
     dc2:	53 01       	movw	r10, r6
     dc4:	13 c0       	rjmp	.+38     	; 0xdec <vfprintf+0x154>
     dc6:	28 01       	movw	r4, r16
     dc8:	f2 e0       	ldi	r31, 0x02	; 2
     dca:	4f 0e       	add	r4, r31
     dcc:	51 1c       	adc	r5, r1
     dce:	f8 01       	movw	r30, r16
     dd0:	a0 80       	ld	r10, Z
     dd2:	b1 80       	ldd	r11, Z+1	; 0x01
     dd4:	36 fe       	sbrs	r3, 6
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <vfprintf+0x146>
     dd8:	69 2d       	mov	r22, r9
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <vfprintf+0x14a>
     dde:	6f ef       	ldi	r22, 0xFF	; 255
     de0:	7f ef       	ldi	r23, 0xFF	; 255
     de2:	c5 01       	movw	r24, r10
     de4:	0e 94 38 08 	call	0x1070	; 0x1070 <strnlen>
     de8:	4c 01       	movw	r8, r24
     dea:	82 01       	movw	r16, r4
     dec:	f3 2d       	mov	r31, r3
     dee:	ff 77       	andi	r31, 0x7F	; 127
     df0:	3f 2e       	mov	r3, r31
     df2:	16 c0       	rjmp	.+44     	; 0xe20 <vfprintf+0x188>
     df4:	28 01       	movw	r4, r16
     df6:	22 e0       	ldi	r18, 0x02	; 2
     df8:	42 0e       	add	r4, r18
     dfa:	51 1c       	adc	r5, r1
     dfc:	f8 01       	movw	r30, r16
     dfe:	a0 80       	ld	r10, Z
     e00:	b1 80       	ldd	r11, Z+1	; 0x01
     e02:	36 fe       	sbrs	r3, 6
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <vfprintf+0x174>
     e06:	69 2d       	mov	r22, r9
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <vfprintf+0x178>
     e0c:	6f ef       	ldi	r22, 0xFF	; 255
     e0e:	7f ef       	ldi	r23, 0xFF	; 255
     e10:	c5 01       	movw	r24, r10
     e12:	0e 94 2d 08 	call	0x105a	; 0x105a <strnlen_P>
     e16:	4c 01       	movw	r8, r24
     e18:	f3 2d       	mov	r31, r3
     e1a:	f0 68       	ori	r31, 0x80	; 128
     e1c:	3f 2e       	mov	r3, r31
     e1e:	82 01       	movw	r16, r4
     e20:	33 fc       	sbrc	r3, 3
     e22:	1b c0       	rjmp	.+54     	; 0xe5a <vfprintf+0x1c2>
     e24:	82 2d       	mov	r24, r2
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	88 16       	cp	r8, r24
     e2a:	99 06       	cpc	r9, r25
     e2c:	b0 f4       	brcc	.+44     	; 0xe5a <vfprintf+0x1c2>
     e2e:	b6 01       	movw	r22, r12
     e30:	80 e2       	ldi	r24, 0x20	; 32
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     e38:	2a 94       	dec	r2
     e3a:	f4 cf       	rjmp	.-24     	; 0xe24 <vfprintf+0x18c>
     e3c:	f5 01       	movw	r30, r10
     e3e:	37 fc       	sbrc	r3, 7
     e40:	85 91       	lpm	r24, Z+
     e42:	37 fe       	sbrs	r3, 7
     e44:	81 91       	ld	r24, Z+
     e46:	5f 01       	movw	r10, r30
     e48:	b6 01       	movw	r22, r12
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     e50:	21 10       	cpse	r2, r1
     e52:	2a 94       	dec	r2
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	82 1a       	sub	r8, r18
     e58:	91 08       	sbc	r9, r1
     e5a:	81 14       	cp	r8, r1
     e5c:	91 04       	cpc	r9, r1
     e5e:	71 f7       	brne	.-36     	; 0xe3c <vfprintf+0x1a4>
     e60:	e8 c0       	rjmp	.+464    	; 0x1032 <vfprintf+0x39a>
     e62:	84 36       	cpi	r24, 0x64	; 100
     e64:	11 f0       	breq	.+4      	; 0xe6a <vfprintf+0x1d2>
     e66:	89 36       	cpi	r24, 0x69	; 105
     e68:	41 f5       	brne	.+80     	; 0xeba <vfprintf+0x222>
     e6a:	f8 01       	movw	r30, r16
     e6c:	37 fe       	sbrs	r3, 7
     e6e:	07 c0       	rjmp	.+14     	; 0xe7e <vfprintf+0x1e6>
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	93 81       	ldd	r25, Z+3	; 0x03
     e78:	0c 5f       	subi	r16, 0xFC	; 252
     e7a:	1f 4f       	sbci	r17, 0xFF	; 255
     e7c:	08 c0       	rjmp	.+16     	; 0xe8e <vfprintf+0x1f6>
     e7e:	60 81       	ld	r22, Z
     e80:	71 81       	ldd	r23, Z+1	; 0x01
     e82:	07 2e       	mov	r0, r23
     e84:	00 0c       	add	r0, r0
     e86:	88 0b       	sbc	r24, r24
     e88:	99 0b       	sbc	r25, r25
     e8a:	0e 5f       	subi	r16, 0xFE	; 254
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	f3 2d       	mov	r31, r3
     e90:	ff 76       	andi	r31, 0x6F	; 111
     e92:	3f 2e       	mov	r3, r31
     e94:	97 ff       	sbrs	r25, 7
     e96:	09 c0       	rjmp	.+18     	; 0xeaa <vfprintf+0x212>
     e98:	90 95       	com	r25
     e9a:	80 95       	com	r24
     e9c:	70 95       	com	r23
     e9e:	61 95       	neg	r22
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	8f 4f       	sbci	r24, 0xFF	; 255
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	f0 68       	ori	r31, 0x80	; 128
     ea8:	3f 2e       	mov	r3, r31
     eaa:	2a e0       	ldi	r18, 0x0A	; 10
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	a3 01       	movw	r20, r6
     eb0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__ultoa_invert>
     eb4:	88 2e       	mov	r8, r24
     eb6:	86 18       	sub	r8, r6
     eb8:	45 c0       	rjmp	.+138    	; 0xf44 <vfprintf+0x2ac>
     eba:	85 37       	cpi	r24, 0x75	; 117
     ebc:	31 f4       	brne	.+12     	; 0xeca <vfprintf+0x232>
     ebe:	23 2d       	mov	r18, r3
     ec0:	2f 7e       	andi	r18, 0xEF	; 239
     ec2:	b2 2e       	mov	r11, r18
     ec4:	2a e0       	ldi	r18, 0x0A	; 10
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	25 c0       	rjmp	.+74     	; 0xf14 <vfprintf+0x27c>
     eca:	93 2d       	mov	r25, r3
     ecc:	99 7f       	andi	r25, 0xF9	; 249
     ece:	b9 2e       	mov	r11, r25
     ed0:	8f 36       	cpi	r24, 0x6F	; 111
     ed2:	c1 f0       	breq	.+48     	; 0xf04 <vfprintf+0x26c>
     ed4:	18 f4       	brcc	.+6      	; 0xedc <vfprintf+0x244>
     ed6:	88 35       	cpi	r24, 0x58	; 88
     ed8:	79 f0       	breq	.+30     	; 0xef8 <vfprintf+0x260>
     eda:	b5 c0       	rjmp	.+362    	; 0x1046 <vfprintf+0x3ae>
     edc:	80 37       	cpi	r24, 0x70	; 112
     ede:	19 f0       	breq	.+6      	; 0xee6 <vfprintf+0x24e>
     ee0:	88 37       	cpi	r24, 0x78	; 120
     ee2:	21 f0       	breq	.+8      	; 0xeec <vfprintf+0x254>
     ee4:	b0 c0       	rjmp	.+352    	; 0x1046 <vfprintf+0x3ae>
     ee6:	e9 2f       	mov	r30, r25
     ee8:	e0 61       	ori	r30, 0x10	; 16
     eea:	be 2e       	mov	r11, r30
     eec:	b4 fe       	sbrs	r11, 4
     eee:	0d c0       	rjmp	.+26     	; 0xf0a <vfprintf+0x272>
     ef0:	fb 2d       	mov	r31, r11
     ef2:	f4 60       	ori	r31, 0x04	; 4
     ef4:	bf 2e       	mov	r11, r31
     ef6:	09 c0       	rjmp	.+18     	; 0xf0a <vfprintf+0x272>
     ef8:	34 fe       	sbrs	r3, 4
     efa:	0a c0       	rjmp	.+20     	; 0xf10 <vfprintf+0x278>
     efc:	29 2f       	mov	r18, r25
     efe:	26 60       	ori	r18, 0x06	; 6
     f00:	b2 2e       	mov	r11, r18
     f02:	06 c0       	rjmp	.+12     	; 0xf10 <vfprintf+0x278>
     f04:	28 e0       	ldi	r18, 0x08	; 8
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <vfprintf+0x27c>
     f0a:	20 e1       	ldi	r18, 0x10	; 16
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <vfprintf+0x27c>
     f10:	20 e1       	ldi	r18, 0x10	; 16
     f12:	32 e0       	ldi	r19, 0x02	; 2
     f14:	f8 01       	movw	r30, r16
     f16:	b7 fe       	sbrs	r11, 7
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <vfprintf+0x290>
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	0c 5f       	subi	r16, 0xFC	; 252
     f24:	1f 4f       	sbci	r17, 0xFF	; 255
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <vfprintf+0x29c>
     f28:	60 81       	ld	r22, Z
     f2a:	71 81       	ldd	r23, Z+1	; 0x01
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 5f       	subi	r16, 0xFE	; 254
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	a3 01       	movw	r20, r6
     f36:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__ultoa_invert>
     f3a:	88 2e       	mov	r8, r24
     f3c:	86 18       	sub	r8, r6
     f3e:	fb 2d       	mov	r31, r11
     f40:	ff 77       	andi	r31, 0x7F	; 127
     f42:	3f 2e       	mov	r3, r31
     f44:	36 fe       	sbrs	r3, 6
     f46:	0d c0       	rjmp	.+26     	; 0xf62 <vfprintf+0x2ca>
     f48:	23 2d       	mov	r18, r3
     f4a:	2e 7f       	andi	r18, 0xFE	; 254
     f4c:	a2 2e       	mov	r10, r18
     f4e:	89 14       	cp	r8, r9
     f50:	58 f4       	brcc	.+22     	; 0xf68 <vfprintf+0x2d0>
     f52:	34 fe       	sbrs	r3, 4
     f54:	0b c0       	rjmp	.+22     	; 0xf6c <vfprintf+0x2d4>
     f56:	32 fc       	sbrc	r3, 2
     f58:	09 c0       	rjmp	.+18     	; 0xf6c <vfprintf+0x2d4>
     f5a:	83 2d       	mov	r24, r3
     f5c:	8e 7e       	andi	r24, 0xEE	; 238
     f5e:	a8 2e       	mov	r10, r24
     f60:	05 c0       	rjmp	.+10     	; 0xf6c <vfprintf+0x2d4>
     f62:	b8 2c       	mov	r11, r8
     f64:	a3 2c       	mov	r10, r3
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <vfprintf+0x2d6>
     f68:	b8 2c       	mov	r11, r8
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <vfprintf+0x2d6>
     f6c:	b9 2c       	mov	r11, r9
     f6e:	a4 fe       	sbrs	r10, 4
     f70:	0f c0       	rjmp	.+30     	; 0xf90 <vfprintf+0x2f8>
     f72:	fe 01       	movw	r30, r28
     f74:	e8 0d       	add	r30, r8
     f76:	f1 1d       	adc	r31, r1
     f78:	80 81       	ld	r24, Z
     f7a:	80 33       	cpi	r24, 0x30	; 48
     f7c:	21 f4       	brne	.+8      	; 0xf86 <vfprintf+0x2ee>
     f7e:	9a 2d       	mov	r25, r10
     f80:	99 7e       	andi	r25, 0xE9	; 233
     f82:	a9 2e       	mov	r10, r25
     f84:	09 c0       	rjmp	.+18     	; 0xf98 <vfprintf+0x300>
     f86:	a2 fe       	sbrs	r10, 2
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <vfprintf+0x2fe>
     f8a:	b3 94       	inc	r11
     f8c:	b3 94       	inc	r11
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <vfprintf+0x300>
     f90:	8a 2d       	mov	r24, r10
     f92:	86 78       	andi	r24, 0x86	; 134
     f94:	09 f0       	breq	.+2      	; 0xf98 <vfprintf+0x300>
     f96:	b3 94       	inc	r11
     f98:	a3 fc       	sbrc	r10, 3
     f9a:	11 c0       	rjmp	.+34     	; 0xfbe <vfprintf+0x326>
     f9c:	a0 fe       	sbrs	r10, 0
     f9e:	06 c0       	rjmp	.+12     	; 0xfac <vfprintf+0x314>
     fa0:	b2 14       	cp	r11, r2
     fa2:	88 f4       	brcc	.+34     	; 0xfc6 <vfprintf+0x32e>
     fa4:	28 0c       	add	r2, r8
     fa6:	92 2c       	mov	r9, r2
     fa8:	9b 18       	sub	r9, r11
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <vfprintf+0x330>
     fac:	b2 14       	cp	r11, r2
     fae:	60 f4       	brcc	.+24     	; 0xfc8 <vfprintf+0x330>
     fb0:	b6 01       	movw	r22, r12
     fb2:	80 e2       	ldi	r24, 0x20	; 32
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     fba:	b3 94       	inc	r11
     fbc:	f7 cf       	rjmp	.-18     	; 0xfac <vfprintf+0x314>
     fbe:	b2 14       	cp	r11, r2
     fc0:	18 f4       	brcc	.+6      	; 0xfc8 <vfprintf+0x330>
     fc2:	2b 18       	sub	r2, r11
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <vfprintf+0x332>
     fc6:	98 2c       	mov	r9, r8
     fc8:	21 2c       	mov	r2, r1
     fca:	a4 fe       	sbrs	r10, 4
     fcc:	10 c0       	rjmp	.+32     	; 0xfee <vfprintf+0x356>
     fce:	b6 01       	movw	r22, r12
     fd0:	80 e3       	ldi	r24, 0x30	; 48
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
     fd8:	a2 fe       	sbrs	r10, 2
     fda:	17 c0       	rjmp	.+46     	; 0x100a <vfprintf+0x372>
     fdc:	a1 fc       	sbrc	r10, 1
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <vfprintf+0x34e>
     fe0:	88 e7       	ldi	r24, 0x78	; 120
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <vfprintf+0x352>
     fe6:	88 e5       	ldi	r24, 0x58	; 88
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	b6 01       	movw	r22, r12
     fec:	0c c0       	rjmp	.+24     	; 0x1006 <vfprintf+0x36e>
     fee:	8a 2d       	mov	r24, r10
     ff0:	86 78       	andi	r24, 0x86	; 134
     ff2:	59 f0       	breq	.+22     	; 0x100a <vfprintf+0x372>
     ff4:	a1 fe       	sbrs	r10, 1
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <vfprintf+0x364>
     ff8:	8b e2       	ldi	r24, 0x2B	; 43
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <vfprintf+0x366>
     ffc:	80 e2       	ldi	r24, 0x20	; 32
     ffe:	a7 fc       	sbrc	r10, 7
    1000:	8d e2       	ldi	r24, 0x2D	; 45
    1002:	b6 01       	movw	r22, r12
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
    100a:	89 14       	cp	r8, r9
    100c:	38 f4       	brcc	.+14     	; 0x101c <vfprintf+0x384>
    100e:	b6 01       	movw	r22, r12
    1010:	80 e3       	ldi	r24, 0x30	; 48
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
    1018:	9a 94       	dec	r9
    101a:	f7 cf       	rjmp	.-18     	; 0x100a <vfprintf+0x372>
    101c:	8a 94       	dec	r8
    101e:	f3 01       	movw	r30, r6
    1020:	e8 0d       	add	r30, r8
    1022:	f1 1d       	adc	r31, r1
    1024:	80 81       	ld	r24, Z
    1026:	b6 01       	movw	r22, r12
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
    102e:	81 10       	cpse	r8, r1
    1030:	f5 cf       	rjmp	.-22     	; 0x101c <vfprintf+0x384>
    1032:	22 20       	and	r2, r2
    1034:	09 f4       	brne	.+2      	; 0x1038 <vfprintf+0x3a0>
    1036:	42 ce       	rjmp	.-892    	; 0xcbc <vfprintf+0x24>
    1038:	b6 01       	movw	r22, r12
    103a:	80 e2       	ldi	r24, 0x20	; 32
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 43 08 	call	0x1086	; 0x1086 <fputc>
    1042:	2a 94       	dec	r2
    1044:	f6 cf       	rjmp	.-20     	; 0x1032 <vfprintf+0x39a>
    1046:	f6 01       	movw	r30, r12
    1048:	86 81       	ldd	r24, Z+6	; 0x06
    104a:	97 81       	ldd	r25, Z+7	; 0x07
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <vfprintf+0x3ba>
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	9f ef       	ldi	r25, 0xFF	; 255
    1052:	2b 96       	adiw	r28, 0x0b	; 11
    1054:	e2 e1       	ldi	r30, 0x12	; 18
    1056:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__epilogue_restores__>

0000105a <strnlen_P>:
    105a:	fc 01       	movw	r30, r24
    105c:	05 90       	lpm	r0, Z+
    105e:	61 50       	subi	r22, 0x01	; 1
    1060:	70 40       	sbci	r23, 0x00	; 0
    1062:	01 10       	cpse	r0, r1
    1064:	d8 f7       	brcc	.-10     	; 0x105c <strnlen_P+0x2>
    1066:	80 95       	com	r24
    1068:	90 95       	com	r25
    106a:	8e 0f       	add	r24, r30
    106c:	9f 1f       	adc	r25, r31
    106e:	08 95       	ret

00001070 <strnlen>:
    1070:	fc 01       	movw	r30, r24
    1072:	61 50       	subi	r22, 0x01	; 1
    1074:	70 40       	sbci	r23, 0x00	; 0
    1076:	01 90       	ld	r0, Z+
    1078:	01 10       	cpse	r0, r1
    107a:	d8 f7       	brcc	.-10     	; 0x1072 <strnlen+0x2>
    107c:	80 95       	com	r24
    107e:	90 95       	com	r25
    1080:	8e 0f       	add	r24, r30
    1082:	9f 1f       	adc	r25, r31
    1084:	08 95       	ret

00001086 <fputc>:
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	fb 01       	movw	r30, r22
    1090:	23 81       	ldd	r18, Z+3	; 0x03
    1092:	21 fd       	sbrc	r18, 1
    1094:	03 c0       	rjmp	.+6      	; 0x109c <fputc+0x16>
    1096:	8f ef       	ldi	r24, 0xFF	; 255
    1098:	9f ef       	ldi	r25, 0xFF	; 255
    109a:	2c c0       	rjmp	.+88     	; 0x10f4 <fputc+0x6e>
    109c:	22 ff       	sbrs	r18, 2
    109e:	16 c0       	rjmp	.+44     	; 0x10cc <fputc+0x46>
    10a0:	46 81       	ldd	r20, Z+6	; 0x06
    10a2:	57 81       	ldd	r21, Z+7	; 0x07
    10a4:	24 81       	ldd	r18, Z+4	; 0x04
    10a6:	35 81       	ldd	r19, Z+5	; 0x05
    10a8:	42 17       	cp	r20, r18
    10aa:	53 07       	cpc	r21, r19
    10ac:	44 f4       	brge	.+16     	; 0x10be <fputc+0x38>
    10ae:	a0 81       	ld	r26, Z
    10b0:	b1 81       	ldd	r27, Z+1	; 0x01
    10b2:	9d 01       	movw	r18, r26
    10b4:	2f 5f       	subi	r18, 0xFF	; 255
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	31 83       	std	Z+1, r19	; 0x01
    10ba:	20 83       	st	Z, r18
    10bc:	8c 93       	st	X, r24
    10be:	26 81       	ldd	r18, Z+6	; 0x06
    10c0:	37 81       	ldd	r19, Z+7	; 0x07
    10c2:	2f 5f       	subi	r18, 0xFF	; 255
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	37 83       	std	Z+7, r19	; 0x07
    10c8:	26 83       	std	Z+6, r18	; 0x06
    10ca:	14 c0       	rjmp	.+40     	; 0x10f4 <fputc+0x6e>
    10cc:	8b 01       	movw	r16, r22
    10ce:	ec 01       	movw	r28, r24
    10d0:	fb 01       	movw	r30, r22
    10d2:	00 84       	ldd	r0, Z+8	; 0x08
    10d4:	f1 85       	ldd	r31, Z+9	; 0x09
    10d6:	e0 2d       	mov	r30, r0
    10d8:	09 95       	icall
    10da:	89 2b       	or	r24, r25
    10dc:	e1 f6       	brne	.-72     	; 0x1096 <fputc+0x10>
    10de:	d8 01       	movw	r26, r16
    10e0:	16 96       	adiw	r26, 0x06	; 6
    10e2:	8d 91       	ld	r24, X+
    10e4:	9c 91       	ld	r25, X
    10e6:	17 97       	sbiw	r26, 0x07	; 7
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	17 96       	adiw	r26, 0x07	; 7
    10ec:	9c 93       	st	X, r25
    10ee:	8e 93       	st	-X, r24
    10f0:	16 97       	sbiw	r26, 0x06	; 6
    10f2:	ce 01       	movw	r24, r28
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret

000010fe <__ultoa_invert>:
    10fe:	fa 01       	movw	r30, r20
    1100:	aa 27       	eor	r26, r26
    1102:	28 30       	cpi	r18, 0x08	; 8
    1104:	51 f1       	breq	.+84     	; 0x115a <__ultoa_invert+0x5c>
    1106:	20 31       	cpi	r18, 0x10	; 16
    1108:	81 f1       	breq	.+96     	; 0x116a <__ultoa_invert+0x6c>
    110a:	e8 94       	clt
    110c:	6f 93       	push	r22
    110e:	6e 7f       	andi	r22, 0xFE	; 254
    1110:	6e 5f       	subi	r22, 0xFE	; 254
    1112:	7f 4f       	sbci	r23, 0xFF	; 255
    1114:	8f 4f       	sbci	r24, 0xFF	; 255
    1116:	9f 4f       	sbci	r25, 0xFF	; 255
    1118:	af 4f       	sbci	r26, 0xFF	; 255
    111a:	b1 e0       	ldi	r27, 0x01	; 1
    111c:	3e d0       	rcall	.+124    	; 0x119a <__ultoa_invert+0x9c>
    111e:	b4 e0       	ldi	r27, 0x04	; 4
    1120:	3c d0       	rcall	.+120    	; 0x119a <__ultoa_invert+0x9c>
    1122:	67 0f       	add	r22, r23
    1124:	78 1f       	adc	r23, r24
    1126:	89 1f       	adc	r24, r25
    1128:	9a 1f       	adc	r25, r26
    112a:	a1 1d       	adc	r26, r1
    112c:	68 0f       	add	r22, r24
    112e:	79 1f       	adc	r23, r25
    1130:	8a 1f       	adc	r24, r26
    1132:	91 1d       	adc	r25, r1
    1134:	a1 1d       	adc	r26, r1
    1136:	6a 0f       	add	r22, r26
    1138:	71 1d       	adc	r23, r1
    113a:	81 1d       	adc	r24, r1
    113c:	91 1d       	adc	r25, r1
    113e:	a1 1d       	adc	r26, r1
    1140:	20 d0       	rcall	.+64     	; 0x1182 <__ultoa_invert+0x84>
    1142:	09 f4       	brne	.+2      	; 0x1146 <__ultoa_invert+0x48>
    1144:	68 94       	set
    1146:	3f 91       	pop	r19
    1148:	2a e0       	ldi	r18, 0x0A	; 10
    114a:	26 9f       	mul	r18, r22
    114c:	11 24       	eor	r1, r1
    114e:	30 19       	sub	r19, r0
    1150:	30 5d       	subi	r19, 0xD0	; 208
    1152:	31 93       	st	Z+, r19
    1154:	de f6       	brtc	.-74     	; 0x110c <__ultoa_invert+0xe>
    1156:	cf 01       	movw	r24, r30
    1158:	08 95       	ret
    115a:	46 2f       	mov	r20, r22
    115c:	47 70       	andi	r20, 0x07	; 7
    115e:	40 5d       	subi	r20, 0xD0	; 208
    1160:	41 93       	st	Z+, r20
    1162:	b3 e0       	ldi	r27, 0x03	; 3
    1164:	0f d0       	rcall	.+30     	; 0x1184 <__ultoa_invert+0x86>
    1166:	c9 f7       	brne	.-14     	; 0x115a <__ultoa_invert+0x5c>
    1168:	f6 cf       	rjmp	.-20     	; 0x1156 <__ultoa_invert+0x58>
    116a:	46 2f       	mov	r20, r22
    116c:	4f 70       	andi	r20, 0x0F	; 15
    116e:	40 5d       	subi	r20, 0xD0	; 208
    1170:	4a 33       	cpi	r20, 0x3A	; 58
    1172:	18 f0       	brcs	.+6      	; 0x117a <__ultoa_invert+0x7c>
    1174:	49 5d       	subi	r20, 0xD9	; 217
    1176:	31 fd       	sbrc	r19, 1
    1178:	40 52       	subi	r20, 0x20	; 32
    117a:	41 93       	st	Z+, r20
    117c:	02 d0       	rcall	.+4      	; 0x1182 <__ultoa_invert+0x84>
    117e:	a9 f7       	brne	.-22     	; 0x116a <__ultoa_invert+0x6c>
    1180:	ea cf       	rjmp	.-44     	; 0x1156 <__ultoa_invert+0x58>
    1182:	b4 e0       	ldi	r27, 0x04	; 4
    1184:	a6 95       	lsr	r26
    1186:	97 95       	ror	r25
    1188:	87 95       	ror	r24
    118a:	77 95       	ror	r23
    118c:	67 95       	ror	r22
    118e:	ba 95       	dec	r27
    1190:	c9 f7       	brne	.-14     	; 0x1184 <__ultoa_invert+0x86>
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	61 05       	cpc	r22, r1
    1196:	71 05       	cpc	r23, r1
    1198:	08 95       	ret
    119a:	9b 01       	movw	r18, r22
    119c:	ac 01       	movw	r20, r24
    119e:	0a 2e       	mov	r0, r26
    11a0:	06 94       	lsr	r0
    11a2:	57 95       	ror	r21
    11a4:	47 95       	ror	r20
    11a6:	37 95       	ror	r19
    11a8:	27 95       	ror	r18
    11aa:	ba 95       	dec	r27
    11ac:	c9 f7       	brne	.-14     	; 0x11a0 <__ultoa_invert+0xa2>
    11ae:	62 0f       	add	r22, r18
    11b0:	73 1f       	adc	r23, r19
    11b2:	84 1f       	adc	r24, r20
    11b4:	95 1f       	adc	r25, r21
    11b6:	a0 1d       	adc	r26, r0
    11b8:	08 95       	ret

000011ba <__divmodsi4>:
    11ba:	05 2e       	mov	r0, r21
    11bc:	97 fb       	bst	r25, 7
    11be:	1e f4       	brtc	.+6      	; 0x11c6 <__divmodsi4+0xc>
    11c0:	00 94       	com	r0
    11c2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__negsi2>
    11c6:	57 fd       	sbrc	r21, 7
    11c8:	07 d0       	rcall	.+14     	; 0x11d8 <__divmodsi4_neg2>
    11ca:	0e 94 46 09 	call	0x128c	; 0x128c <__udivmodsi4>
    11ce:	07 fc       	sbrc	r0, 7
    11d0:	03 d0       	rcall	.+6      	; 0x11d8 <__divmodsi4_neg2>
    11d2:	4e f4       	brtc	.+18     	; 0x11e6 <__divmodsi4_exit>
    11d4:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__negsi2>

000011d8 <__divmodsi4_neg2>:
    11d8:	50 95       	com	r21
    11da:	40 95       	com	r20
    11dc:	30 95       	com	r19
    11de:	21 95       	neg	r18
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
    11e2:	4f 4f       	sbci	r20, 0xFF	; 255
    11e4:	5f 4f       	sbci	r21, 0xFF	; 255

000011e6 <__divmodsi4_exit>:
    11e6:	08 95       	ret

000011e8 <__negsi2>:
    11e8:	90 95       	com	r25
    11ea:	80 95       	com	r24
    11ec:	70 95       	com	r23
    11ee:	61 95       	neg	r22
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	8f 4f       	sbci	r24, 0xFF	; 255
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	08 95       	ret

000011f8 <__muluhisi3>:
    11f8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__umulhisi3>
    11fc:	a5 9f       	mul	r26, r21
    11fe:	90 0d       	add	r25, r0
    1200:	b4 9f       	mul	r27, r20
    1202:	90 0d       	add	r25, r0
    1204:	a4 9f       	mul	r26, r20
    1206:	80 0d       	add	r24, r0
    1208:	91 1d       	adc	r25, r1
    120a:	11 24       	eor	r1, r1
    120c:	08 95       	ret

0000120e <__mulshisi3>:
    120e:	b7 ff       	sbrs	r27, 7
    1210:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__muluhisi3>

00001214 <__mulohisi3>:
    1214:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__muluhisi3>
    1218:	82 1b       	sub	r24, r18
    121a:	93 0b       	sbc	r25, r19
    121c:	08 95       	ret

0000121e <__prologue_saves__>:
    121e:	2f 92       	push	r2
    1220:	3f 92       	push	r3
    1222:	4f 92       	push	r4
    1224:	5f 92       	push	r5
    1226:	6f 92       	push	r6
    1228:	7f 92       	push	r7
    122a:	8f 92       	push	r8
    122c:	9f 92       	push	r9
    122e:	af 92       	push	r10
    1230:	bf 92       	push	r11
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	ca 1b       	sub	r28, r26
    1248:	db 0b       	sbc	r29, r27
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	09 94       	ijmp

00001256 <__epilogue_restores__>:
    1256:	2a 88       	ldd	r2, Y+18	; 0x12
    1258:	39 88       	ldd	r3, Y+17	; 0x11
    125a:	48 88       	ldd	r4, Y+16	; 0x10
    125c:	5f 84       	ldd	r5, Y+15	; 0x0f
    125e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1260:	7d 84       	ldd	r7, Y+13	; 0x0d
    1262:	8c 84       	ldd	r8, Y+12	; 0x0c
    1264:	9b 84       	ldd	r9, Y+11	; 0x0b
    1266:	aa 84       	ldd	r10, Y+10	; 0x0a
    1268:	b9 84       	ldd	r11, Y+9	; 0x09
    126a:	c8 84       	ldd	r12, Y+8	; 0x08
    126c:	df 80       	ldd	r13, Y+7	; 0x07
    126e:	ee 80       	ldd	r14, Y+6	; 0x06
    1270:	fd 80       	ldd	r15, Y+5	; 0x05
    1272:	0c 81       	ldd	r16, Y+4	; 0x04
    1274:	1b 81       	ldd	r17, Y+3	; 0x03
    1276:	aa 81       	ldd	r26, Y+2	; 0x02
    1278:	b9 81       	ldd	r27, Y+1	; 0x01
    127a:	ce 0f       	add	r28, r30
    127c:	d1 1d       	adc	r29, r1
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	ed 01       	movw	r28, r26
    128a:	08 95       	ret

0000128c <__udivmodsi4>:
    128c:	a1 e2       	ldi	r26, 0x21	; 33
    128e:	1a 2e       	mov	r1, r26
    1290:	aa 1b       	sub	r26, r26
    1292:	bb 1b       	sub	r27, r27
    1294:	fd 01       	movw	r30, r26
    1296:	0d c0       	rjmp	.+26     	; 0x12b2 <__udivmodsi4_ep>

00001298 <__udivmodsi4_loop>:
    1298:	aa 1f       	adc	r26, r26
    129a:	bb 1f       	adc	r27, r27
    129c:	ee 1f       	adc	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	a2 17       	cp	r26, r18
    12a2:	b3 07       	cpc	r27, r19
    12a4:	e4 07       	cpc	r30, r20
    12a6:	f5 07       	cpc	r31, r21
    12a8:	20 f0       	brcs	.+8      	; 0x12b2 <__udivmodsi4_ep>
    12aa:	a2 1b       	sub	r26, r18
    12ac:	b3 0b       	sbc	r27, r19
    12ae:	e4 0b       	sbc	r30, r20
    12b0:	f5 0b       	sbc	r31, r21

000012b2 <__udivmodsi4_ep>:
    12b2:	66 1f       	adc	r22, r22
    12b4:	77 1f       	adc	r23, r23
    12b6:	88 1f       	adc	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	1a 94       	dec	r1
    12bc:	69 f7       	brne	.-38     	; 0x1298 <__udivmodsi4_loop>
    12be:	60 95       	com	r22
    12c0:	70 95       	com	r23
    12c2:	80 95       	com	r24
    12c4:	90 95       	com	r25
    12c6:	9b 01       	movw	r18, r22
    12c8:	ac 01       	movw	r20, r24
    12ca:	bd 01       	movw	r22, r26
    12cc:	cf 01       	movw	r24, r30
    12ce:	08 95       	ret

000012d0 <__umulhisi3>:
    12d0:	a2 9f       	mul	r26, r18
    12d2:	b0 01       	movw	r22, r0
    12d4:	b3 9f       	mul	r27, r19
    12d6:	c0 01       	movw	r24, r0
    12d8:	a3 9f       	mul	r26, r19
    12da:	70 0d       	add	r23, r0
    12dc:	81 1d       	adc	r24, r1
    12de:	11 24       	eor	r1, r1
    12e0:	91 1d       	adc	r25, r1
    12e2:	b2 9f       	mul	r27, r18
    12e4:	70 0d       	add	r23, r0
    12e6:	81 1d       	adc	r24, r1
    12e8:	11 24       	eor	r1, r1
    12ea:	91 1d       	adc	r25, r1
    12ec:	08 95       	ret

000012ee <_exit>:
    12ee:	f8 94       	cli

000012f0 <__stop_program>:
    12f0:	ff cf       	rjmp	.-2      	; 0x12f0 <__stop_program>
